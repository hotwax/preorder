{"remainingRequest":"/home/aniket/Desktop/Hact/preorder/node_modules/babel-loader/lib/index.js!/home/aniket/Desktop/Hact/preorder/node_modules/ts-loader/index.js??ref--14-2!/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js??ref--13-0!/home/aniket/Desktop/Hact/preorder/src/store/modules/stock/actions.ts","dependencies":[{"path":"/home/aniket/Desktop/Hact/preorder/src/store/modules/stock/actions.ts","mtime":1634884664340},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/cache-loader/dist/cjs.js","mtime":1634884698972},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/babel-loader/lib/index.js","mtime":1634884699504},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/ts-loader/index.js","mtime":1634884699568},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js","mtime":1634884699056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvYW5pa2V0L0Rlc2t0b3AvSGFjdC9wcmVvcmRlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCB7IFN0b2NrU2VydmljZSB9IGZyb20gJ0Avc2VydmljZXMvU3RvY2tTZXJ2aWNlJzsKaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi9tdXRhdGlvbi10eXBlcyc7CmltcG9ydCB7IGhhc0Vycm9yIH0gZnJvbSAnQC91dGlscyc7CnZhciBhY3Rpb25zID0gewogIC8qKgogICAqIEFkZCBzdG9ja3Mgb2Ygc3BlY2lmaWMgcHJvZHVjdAogICAqLwogIGFkZFByb2R1Y3Q6IGZ1bmN0aW9uIGFkZFByb2R1Y3QoX3JlZiwgX3JlZjIpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBjb21taXQsIHByb2R1Y3RJZCwgcmVzcDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgIHByb2R1Y3RJZCA9IF9yZWYyLnByb2R1Y3RJZDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gU3RvY2tTZXJ2aWNlLmNoZWNrSW52ZW50b3J5KHsKICAgICAgICAgICAgICAgIHByb2R1Y3RJZDogcHJvZHVjdElkCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgcmVzcCA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGlmIChyZXNwLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgICBjb21taXQodHlwZXMuU1RPQ0tfQUREX1BST0RVQ1QsIHsKICAgICAgICAgICAgICAgICAgcHJvZHVjdElkOiBwcm9kdWN0SWQsCiAgICAgICAgICAgICAgICAgIHN0b2NrOiByZXNwLmRhdGEuZG9jcwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0sCgogIC8qKgogICAqIEFkZCBzdG9ja3Mgb2YgbGlzdCBvZiBwcm9kdWN0cwogICAqLwogIGFkZFByb2R1Y3RzOiBmdW5jdGlvbiBhZGRQcm9kdWN0cyhfcmVmMywgX3JlZjQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgY29tbWl0LCBwcm9kdWN0SWRzLCByZXNwOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICBwcm9kdWN0SWRzID0gX3JlZjQucHJvZHVjdElkczsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIFN0b2NrU2VydmljZS5jaGVja0ludmVudG9yeSh7CiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IHsKICAgICAgICAgICAgICAgICAgInByb2R1Y3RJZCI6IHByb2R1Y3RJZHMsCiAgICAgICAgICAgICAgICAgICJwcm9kdWN0SWRfb3AiOiAiaW4iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImZpZWxkc1RvU2VsZWN0IjogWyJwcm9kdWN0SWQiLCAiYXRwIl0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgIGlmIChyZXNwLnN0YXR1cyA9PT0gMjAwICYmICFoYXNFcnJvcihyZXNwKSkgewogICAgICAgICAgICAgICAgLy8gSGFuZGxlZCBlbXB0eSByZXNwb25zZSBpbiBjYXNlIG9mIGZhaWxlZCBxdWVyeQogICAgICAgICAgICAgICAgaWYgKHJlc3AuZGF0YSkgY29tbWl0KHR5cGVzLlNUT0NLX0FERF9QUk9EVUNUUywgewogICAgICAgICAgICAgICAgICBwcm9kdWN0czogcmVzcC5kYXRhLmRvY3MKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSgpOwogIH0KfTsKZXhwb3J0IGRlZmF1bHQgYWN0aW9uczs="},{"version":3,"sources":["/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js??ref--13-0!/home/aniket/Desktop/Hact/preorder/src/store/modules/stock/actions.ts"],"names":[],"mappings":";;AAAA,SAAS,YAAT,QAA6B,yBAA7B;AAIA,OAAO,KAAK,KAAZ,MAAuB,kBAAvB;AACA,SAAS,QAAT,QAAyB,SAAzB;AAEA,IAAM,OAAO,GAAsC;AAEjD;;AAEG;AACG,EAAA,UAL2C,mCAKJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvB,cAAA,MAAuB,QAAvB,MAAuB;AAAX,cAAA,SAAW,SAAX,SAAW;AAAA;AAAA,qBACnB,YAAY,CAAC,cAAb,CAA4B;AAAE,gBAAA,SAAS,EAAT;AAAF,eAA5B,CADmB;;AAAA;AACrC,cAAA,IADqC;;AAE3C,kBAAI,IAAI,CAAC,MAAL,KAAgB,GAApB,EAAyB;AACvB,gBAAA,MAAM,CAAC,KAAK,CAAC,iBAAP,EAA0B;AAAE,kBAAA,SAAS,EAAT,SAAF;AAAa,kBAAA,KAAK,EAAE,IAAI,CAAC,IAAL,CAAU;AAA9B,iBAA1B,CAAN;AACD;;AAJ0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK5C,GAVgD;;AAYjD;;AAEG;AACI,EAAA,WAf0C,qCAeD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAxB,cAAA,MAAwB,SAAxB,MAAwB;AAAZ,cAAA,UAAY,SAAZ,UAAY;AAAA;AAAA,qBAItB,YAAY,CAAC,cAAb,CAA4B;AAClD,2BAAW;AACT,+BAAa,UADJ;AAET,kCAAgB;AAFP,iBADuC;AAKlD,kCAAkB,CAAC,WAAD,EAAa,KAAb;AALgC,eAA5B,CAJsB;;AAAA;AAIxC,cAAA,IAJwC;;AAW9C,kBAAI,IAAI,CAAC,MAAL,KAAgB,GAAhB,IAAuB,CAAC,QAAQ,CAAC,IAAD,CAApC,EAA4C;AAC1C;AACA,oBAAI,IAAI,CAAC,IAAT,EAAe,MAAM,CAAC,KAAK,CAAC,kBAAP,EAA2B;AAAE,kBAAA,QAAQ,EAAE,IAAI,CAAC,IAAL,CAAU;AAAtB,iBAA3B,CAAN;AAChB;;AAd6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAe/C;AA9BgD,CAAnD;AAiCA,eAAe,OAAf","sourcesContent":["import { StockService } from '@/services/StockService'\nimport { ActionTree } from 'vuex'\nimport RootState from '@/store/RootState'\nimport StockState from './StockState'\nimport * as types from './mutation-types'\nimport { hasError } from '@/utils'\n\nconst actions: ActionTree<StockState, RootState> = {\n\n  /**\n   * Add stocks of specific product\n   */\n  async addProduct  ( { commit }, { productId }) {\n    const resp: any = await StockService.checkInventory({ productId });\n    if (resp.status === 200) {\n      commit(types.STOCK_ADD_PRODUCT, { productId, stock: resp.data.docs })\n    }\n  },\n\n  /**\n   * Add stocks of list of products\n   */\n   async addProducts  ( { commit }, { productIds }) {\n    // There is a limitation at API level to handle only 100 records\n    // but as we will always fetch data for the fetched records which will be as per the viewSize\n    // assuming that the value will never be 100 to show\n    const resp: any = await StockService.checkInventory({\n      \"filters\": {\n        \"productId\": productIds,\n        \"productId_op\": \"in\",\n      },\n      \"fieldsToSelect\": [\"productId\",\"atp\"], \n    });\n    if (resp.status === 200 && !hasError(resp)) {\n      // Handled empty response in case of failed query\n      if (resp.data) commit(types.STOCK_ADD_PRODUCTS, { products: resp.data.docs })\n    }\n  }\n\n}\nexport default actions;"],"sourceRoot":""}]}