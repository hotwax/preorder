{"remainingRequest":"/home/aniket/Desktop/Hact/preorder/node_modules/babel-loader/lib/index.js!/home/aniket/Desktop/Hact/preorder/node_modules/ts-loader/index.js??ref--14-2!/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js??ref--13-0!/home/aniket/Desktop/Hact/preorder/src/store/modules/product/actions.ts","dependencies":[{"path":"/home/aniket/Desktop/Hact/preorder/src/store/modules/product/actions.ts","mtime":1634884664340},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/cache-loader/dist/cjs.js","mtime":1634884698972},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/babel-loader/lib/index.js","mtime":1634884699504},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/ts-loader/index.js","mtime":1634884699568},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js","mtime":1634884699056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js??ref--13-0!/home/aniket/Desktop/Hact/preorder/src/store/modules/product/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProductService } from '@/services/ProductService'\nimport { ActionTree } from 'vuex'\nimport RootState from '@/store/RootState'\nimport ProductState from './ProductState'\nimport * as types from './mutation-types'\nimport { hasError, showToast } from '@/utils'\nimport { translate } from '@/i18n'\nimport emitter from '@/event-bus'\n\n\nconst actions: ActionTree<ProductState, RootState> = {\n\n  /**\n   * Fetch cached products\n   */\n  async fetchProducts ( { commit, state }, { productIds }) {\n    const cachedProductIds = Object.keys(state.cached);\n    const productIdFilter= productIds.reduce((filter: string, productId: any) => {\n      if (filter !== '') filter += ' OR '\n      // If product already exist in cached products skip\n      if (cachedProductIds.includes(productId)) {\n        return filter;\n      } else {\n        return filter += productId;\n      }\n    }, '');\n\n    // If there are no products skip the API call\n    if (productIdFilter === '') return;\n\n    const resp = await ProductService.fetchProducts({\n      \"filters\": ['productId: (' + productIdFilter + ')']\n    })\n    if (resp.status === 200 && !hasError(resp)) {\n      const products = resp.data.response.docs;\n      // Handled empty response in case of failed query\n      if (resp.data) commit(types.PRODUCT_ADD_TO_CACHED_MULTIPLE, { products });\n    }\n    // TODO Handle specific error\n    return resp;\n  },\n\n  /**\n   * Fetch cached product\n   */\n   async fetchProduct ( { commit }, { productId }) {\n    // TODO Skip if already exist\n    const resp = await ProductService.fetchProducts({\n      \"filters\": ['productId: ' + productId ]\n    })\n    if (resp.status === 200 && !hasError(resp)) {\n      const product = resp.data.response.docs[0];\n      // Handled empty response in case of failed query\n      if (resp.data) commit(types.PRODUCT_ADD_TO_CACHED, { product });\n    }\n    // TODO Handle specific error\n    return resp;\n  },\n\n  /**\n   * Find Order\n   */\n   async findProducts ( { commit, state, dispatch }, payload) {\n    // Show loader only when new query and not the infinite scroll\n    if (payload.viewIndex === 0) emitter.emit(\"presentLoader\");\n    let resp;\n    try {\n      resp = await ProductService.findOrder(payload)\n      if (resp.status === 200 && !hasError(resp)) {\n        const products = resp.data.grouped.parentProductId;\n        // Add stock information to Stock module to show on UI\n        dispatch('getProductsInformation', { products });\n        // Handled case for infinite scroll\n        if (payload.viewIndex && payload.viewIndex > 0) products.groups = state.list.items.concat(products.groups)\n        commit(types.PRODUCT_LIST_UPDATED, { products });\n      } else {\n        showToast(translate(\"Something went wrong\"));\n      }\n      // Remove added loader only when new query and not the infinite scroll\n      if (payload.viewIndex === 0) emitter.emit(\"dismissLoader\");\n    } catch(error){\n      showToast(translate(\"Something went wrong\"));\n    }\n    // TODO Handle specific error\n    return resp;\n  },\n\n  /**\n   * Reset Order List\n   */\n   resetProductList ( { commit }) {\n    commit(types.PRODUCT_LIST_UPDATED, {\n      products: {\n        groups: [],\n        ngroups: 0\n      }\n    });\n  },\n  /**\n   * Get Product related information \n   */\n   async getProductsInformation  ( context , { products }) {\n    // To remove redundant value Set is used\n    let productIds: any = new Set();\n    products.groups.forEach((product: any) => {\n      productIds.add(product.groupValue);\n    });\n    // Converted to list as methods like reduce not supported\n    productIds = [...productIds]\n    if (productIds.length) {\n      this.dispatch('product/fetchProducts', { productIds })\n      this.dispatch('stock/addProducts', { productIds })\n    }\n  },\n\n  async loadCurrent ({ dispatch, commit} , { productId }) {\n    const current = {\n      product: {},\n      list: {\n          total: 0,\n          items: []\n      },\n      totalPreOrders: 0\n    }\n    current.product = this.getters['product/getProduct'](productId);\n\n    if (Object.keys(current.product).length !== 0) {\n      return commit(types.PRODUCT_CURRENT_UPDATED, { current });\n    } else {\n      return dispatch(\"fetchProduct\", { productId }).then(() => {\n        current.product = this.getters['product/getProduct'](productId);\n        commit(types.PRODUCT_CURRENT_UPDATED, { current });\n      })// TODO Rethrow to show error and navigation to product list page\n    }\n  },\n  /**\n   * Fetch Current List\n   */\n   async fetchCurrentList ( { commit, state, dispatch }, payload) {\n    // Show loader only when new query and not the infinite scroll\n    if (payload.viewIndex === 0) emitter.emit(\"presentLoader\");\n    let resp;\n    try {\n      resp = await ProductService.fetchCurrentList(payload)\n      if (resp.status === 200 && !hasError(resp)) {\n        const products = resp.data.grouped.productId;\n        const current = state.current;\n        current.list.items = products.groups\n        current.list.total = products.ngroups\n        current.totalPreOrders = resp.data.grouped.productId.matches\n        // Add stock information to Stock module to show on UI\n        dispatch('getProductsInformation', { products });\n        // Handled case for infinite scroll\n        // if (payload.viewIndex && payload.viewIndex > 0) products.groups = state.current.list.items.concat(products.groups)\n        commit(types.PRODUCT_CURRENT_UPDATED, { current });\n      } else {\n        showToast(translate(\"Something went wrong\"));\n      }\n      // Remove added loader only when new query and not the infinite scroll\n      if (payload.viewIndex === 0) emitter.emit(\"dismissLoader\");\n    } catch(error){\n      showToast(translate(\"Something went wrong\"));\n    }\n    // TODO Handle specific error\n    return resp;\n  }\n}\nexport default actions;"],"sourceRoot":""}]}