{"remainingRequest":"/home/aniket/Desktop/Hact/preorder/node_modules/babel-loader/lib/index.js!/home/aniket/Desktop/Hact/preorder/node_modules/ts-loader/index.js??ref--14-2!/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js??ref--13-0!/home/aniket/Desktop/Hact/preorder/src/store/modules/job/actions.ts","dependencies":[{"path":"/home/aniket/Desktop/Hact/preorder/src/store/modules/job/actions.ts","mtime":1634884664340},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/cache-loader/dist/cjs.js","mtime":1634884698972},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/babel-loader/lib/index.js","mtime":1634884699504},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/ts-loader/index.js","mtime":1634884699568},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js","mtime":1634884699056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvYW5pa2V0L0Rlc2t0b3AvSGFjdC9wcmVvcmRlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4vbXV0YXRpb24tdHlwZXMnOwppbXBvcnQgeyBoYXNFcnJvciB9IGZyb20gJ0AvdXRpbHMnOwppbXBvcnQgeyBKb2JTZXJ2aWNlIH0gZnJvbSAnQC9zZXJ2aWNlcy9Kb2JTZXJ2aWNlJzsKdmFyIGFjdGlvbnMgPSB7CiAgZmV0Y2hKb2JzOiBmdW5jdGlvbiBmZXRjaEpvYnMoX3JlZiwgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIGNvbW1pdCwgcmVzcDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBKb2JTZXJ2aWNlLmZldGNoSm9icyhwYXlsb2FkKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXNwID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgaWYgKHJlc3Auc3RhdHVzID09PSAyMDAgJiYgIWhhc0Vycm9yKHJlc3ApKSB7CiAgICAgICAgICAgICAgICBjb21taXQodHlwZXMuSk9CX0xJU1RfVVBEQVRFRCwgewogICAgICAgICAgICAgICAgICBpdGVtczogcmVzcC5kYXRhLmRvY3MgPyByZXNwLmRhdGEuZG9jcyA6IFtdLAogICAgICAgICAgICAgICAgICB0b3RhbDogcmVzcC5kYXRhLmNvdW50ID8gcmVzcC5kYXRhLmNvdW50IDogMAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSAvLyBSZW1vdmVkIFRvYXN0IGFzIGl0IHdpbGwgYWxzbyBiZSBhc3luYyBqb2IKICAgICAgICAgICAgICAvLyBUT0RPIEhhbmRsZSBzcGVjaWZpYyBlcnJvcgoKCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcCk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBmZXRjaFBvbGxlZEpvYnM6IGZ1bmN0aW9uIGZldGNoUG9sbGVkSm9icyhfcmVmMiwgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciBjb21taXQsIHJlc3A7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjIuY29tbWl0OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gSm9iU2VydmljZS5mZXRjaEpvYnMocGF5bG9hZCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcCA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgICBpZiAocmVzcC5zdGF0dXMgPT09IDIwMCAmJiAhaGFzRXJyb3IocmVzcCkpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwLmRhdGEuY291bnQpIHsKICAgICAgICAgICAgICAgICAgSm9iU2VydmljZS5wb2xsSm9icygpOwogICAgICAgICAgICAgICAgICBjb21taXQodHlwZXMuSk9CX1VQREFURUQsIHsKICAgICAgICAgICAgICAgICAgICBpdGVtczogcmVzcC5kYXRhLmRvY3MsCiAgICAgICAgICAgICAgICAgICAgdG90YWw6IHJlc3AuZGF0YS5jb3VudCwKICAgICAgICAgICAgICAgICAgICBwb2xsaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgY29tbWl0KHR5cGVzLkpPQl9VUERBVEVELCB7CiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHJlc3AuZGF0YS5kb2NzID8gcmVzcC5kYXRhLmRvY3MgOiBbXSwKICAgICAgICAgICAgICAgICAgICB0b3RhbDogcmVzcC5kYXRhLmNvdW50ID8gcmVzcC5kYXRhLmNvdW50IDogMCwKICAgICAgICAgICAgICAgICAgICBwb2xsaW5nOiBmYWxzZQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IC8vIFRPRE8gSGFuZGxlIHNwZWNpZmljIGVycm9yCgoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcmVzcCk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkoKTsKICB9LAogIGluaXRpYXRlUG9sbGluZ0pvYnM6IGZ1bmN0aW9uIGluaXRpYXRlUG9sbGluZ0pvYnMoX3JlZjMpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICB2YXIgY29tbWl0LCBzdGF0ZSwgZGlzcGF0Y2gsIHJlc3A7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjMuY29tbWl0LCBzdGF0ZSA9IF9yZWYzLnN0YXRlLCBkaXNwYXRjaCA9IF9yZWYzLmRpc3BhdGNoOwoKICAgICAgICAgICAgICBpZiAoc3RhdGUucG9sbGluZykgewogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKCJmZXRjaEpvYnMiLCBKb2JTZXJ2aWNlLnByZXBhcmVGZXRjaEpvYnNRdWVyeSgpKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwID0gX2NvbnRleHQzLnNlbnQ7CgogICAgICAgICAgICAgIGlmIChyZXNwLmRhdGEuY291bnQpIHsKICAgICAgICAgICAgICAgIGNvbW1pdCh0eXBlcy5KT0JfUE9MTElOR19VUERBVEVELCB7CiAgICAgICAgICAgICAgICAgIHBvbGxpbmc6IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgSm9iU2VydmljZS5wb2xsSm9icygpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb21taXQodHlwZXMuSk9CX1BPTExJTkdfVVBEQVRFRCwgewogICAgICAgICAgICAgICAgICBwb2xsaW5nOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSAvLyBUT0RPIEhhbmRsZSBzcGVjaWZpYyBlcnJvcgoKCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHJlc3ApOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTMpOwogICAgfSkpKCk7CiAgfQp9OwpleHBvcnQgZGVmYXVsdCBhY3Rpb25zOw=="},{"version":3,"sources":["/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js??ref--13-0!/home/aniket/Desktop/Hact/preorder/src/store/modules/job/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionTree } from 'vuex'\nimport RootState from '@/store/RootState'\nimport JobState from './JobState'\nimport * as types from './mutation-types'\nimport { hasError } from '@/utils'\nimport { JobService } from '@/services/JobService'\n\nconst actions: ActionTree<JobState, RootState> = {\n\n  async fetchJobs ( { commit }, payload) {\n    const resp = await JobService.fetchJobs(payload)\n    if (resp.status === 200 && !hasError(resp)) {\n      commit(types.JOB_LIST_UPDATED, {\n        items: resp.data.docs ? resp.data.docs : [], // TODO Handled error & docs undefined when no record\n        total: resp.data.count ? resp.data.count : 0 , //  TODO Handled error & count undefined when no record\n       });\n    }\n    // Removed Toast as it will also be async job\n    // TODO Handle specific error\n    return resp;\n  },\n  async fetchPolledJobs ( { commit }, payload) {\n    const resp = await JobService.fetchJobs(payload);\n    if (resp.status === 200 && !hasError(resp)) {\n      if(resp.data.count) {\n        JobService.pollJobs();\n        commit(types.JOB_UPDATED, {\n          items: resp.data.docs,\n          total: resp.data.count,\n          polling: true\n         });\n      } else {\n        commit(types.JOB_UPDATED, {\n          items: resp.data.docs ? resp.data.docs : [], // TODO Handled error & docs undefined when no record\n          total: resp.data.count ? resp.data.count : 0 , //  TODO Handled error & count undefined when no record\n          polling: false\n         });\n      }\n    }\n    // TODO Handle specific error\n    return resp;\n  },\n  async initiatePollingJobs ( { commit, state, dispatch }) {\n    if (!state.polling) {\n      const resp = await dispatch(\"fetchJobs\", JobService.prepareFetchJobsQuery());\n      if(resp.data.count) {\n        commit(types.JOB_POLLING_UPDATED, { \n          polling: true\n        });\n        JobService.pollJobs();\n      } else {\n        commit(types.JOB_POLLING_UPDATED, { \n          polling: false\n        });\n      }\n      // TODO Handle specific error\n      return resp;\n    }\n  },\n\n}\nexport default actions;"],"sourceRoot":""}]}