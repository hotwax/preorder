{"remainingRequest":"/home/aniket/Desktop/Hact/preorder/node_modules/babel-loader/lib/index.js!/home/aniket/Desktop/Hact/preorder/node_modules/ts-loader/index.js??ref--14-2!/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js??ref--13-0!/home/aniket/Desktop/Hact/preorder/src/task-queue/index.ts","dependencies":[{"path":"/home/aniket/Desktop/Hact/preorder/src/task-queue/index.ts","mtime":1634884664340},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/cache-loader/dist/cjs.js","mtime":1634884698972},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/babel-loader/lib/index.js","mtime":1634884699504},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/ts-loader/index.js","mtime":1634884699568},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js","mtime":1634884699056}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2FuaWtldC9EZXNrdG9wL0hhY3QvcHJlb3JkZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgU3RvcmFnZU1hbmFnZXIgZnJvbSAnLi4vc3RvcmFnZS1tYW5hZ2VyJzsKaW1wb3J0IGVtaXR0ZXIgZnJvbSAiLi4vZXZlbnQtYnVzIjsKaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAiLi4vYXBpIjsKCnZhciBwcmVwYXJlVGFzayA9IGZ1bmN0aW9uIHByZXBhcmVUYXNrKCkgewogIHZhciB0YXNrID0ge307CiAgdGFzay50YXNrSWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSArICctJyArIE1hdGgucmFuZG9tKCk7CiAgdGFzay50cmFuc21pdGVkID0gZmFsc2U7CiAgdGFzay5jcmVhdGVkQXQgPSBuZXcgRGF0ZSgpOwogIHRhc2sudXBkYXRlZEF0ID0gbmV3IERhdGUoKTsKICByZXR1cm4gdGFzazsKfTsKCnZhciBxdWV1ZVRhc2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGRhdGEpIHsKICAgIHZhciB0YXNrLCB0YXNrczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgdGFzayA9IHByZXBhcmVUYXNrKCk7CiAgICAgICAgICAgIHRhc2sudXJsID0gZGF0YS51cmw7CiAgICAgICAgICAgIHRhc2sucGF5bG9hZCA9IGRhdGEucGF5bG9hZDsKICAgICAgICAgICAgdGFzay5jYWxsYmFja0V2ZW50ID0gZGF0YS5jYWxsYmFja0V2ZW50OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgcmV0dXJuIFN0b3JhZ2VNYW5hZ2VyLmdldE9iamVjdCgnc3luY1Rhc2tzJyk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICB0YXNrcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIHRhc2tzLnB1c2godGFzayk7CiAgICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE9iamVjdCgnc3luY1Rhc2tzJywgdGFza3MpOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBxdWV1ZVRhc2soX3gpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKdmFyIHJlbW92ZVRhc2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIodGFzaykgewogICAgdmFyIHRhc2tzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gU3RvcmFnZU1hbmFnZXIuZ2V0T2JqZWN0KCdzeW5jVGFza3MnKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHRhc2tzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIHRhc2tzID0gdGFza3MuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udGFza0lkICE9PSB0YXNrLnRhc2tJZDsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIFN0b3JhZ2VNYW5hZ2VyLnNldE9iamVjdCgnc3luY1Rhc2tzJywgdGFza3MpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIHJlbW92ZVRhc2soX3gyKSB7CiAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgp2YXIgcHJvY2Vzc1Rhc2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTModGFzaykgewogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgLy8gVE9ETyBIYW5kbGUgY2FzZSBmb3IgZXhwaXJlZCB0b2tlbiBhbmQgbmV3IGxvZ2dlZCBpbiB1c2VyCiAgICAgICAgICAgIGNsaWVudCh0YXNrLnBheWxvYWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAvLyBBZGQgdG8gcmVzcG9uc2UgYXMgcmVxdWlyZWQgZm9yIGNhbGxiYWNrRXZlbnQKICAgICAgICAgICAgICB0YXNrLnJlc3BvbnNlID0gZGF0YTsKICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgdGFzay5lcnJvciA9IGVycm9yOyAvLyBUT0RPIEFkZCBlcnJvciBpbmZvcm1hdGlvbiB0byBUYXNrIG9yIHJlbW92ZSBpdCBhZnRlciBzaG93aW5nIG1lc3NhZ2UKCiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiZXJyb3IiLCBlcnJvcik7CiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGlmICh0YXNrLmNhbGxiYWNrX2V2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAodGFzay5jYWxsYmFja0V2ZW50LnN0YXJ0c1dpdGgoJ3N0b3JlOicpKSB7Ly8gVE9ETyAKICAgICAgICAgICAgICAgICAgLy9zdG9yZS5kaXNwYXRjaCh0YXNrLmNhbGxiYWNrX2V2ZW50LnNwbGl0KCc6JylbMV0sIHRhc2spCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQodGFzay5jYWxsYmFja0V2ZW50LCB0YXNrKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJlbW92ZVRhc2sodGFzayk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTMpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIHByb2Nlc3NUYXNrKF94MykgewogICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKdmFyIHByb2Nlc3NRdWV1ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWY0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgIHZhciB0YXNrczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIFN0b3JhZ2VNYW5hZ2VyLmdldE9iamVjdCgnc3luY1Rhc2tzJyk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICB0YXNrcyA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICB0YXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0YXNrKSB7CiAgICAgICAgICAgICAgcHJvY2Vzc1Rhc2sodGFzayk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTQpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZSgpIHsKICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCnZhciBpbml0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZjUgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgdmFyIHRhc2tzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gU3RvcmFnZU1hbmFnZXIuZ2V0T2JqZWN0KCdzeW5jVGFza3MnKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHRhc2tzID0gX2NvbnRleHQ1LnNlbnQ7CgogICAgICAgICAgICBpZiAodGFza3MpIHsKICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDc7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRhc2tzID0gW107CiAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNzsKICAgICAgICAgICAgcmV0dXJuIFN0b3JhZ2VNYW5hZ2VyLnNldE9iamVjdCgnc3luY1Rhc2tzJywgdGFza3MpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgZW1pdHRlci5vbignb25saW5lJywgcHJvY2Vzc1F1ZXVlKTsKICAgICAgICAgICAgZW1pdHRlci5vbigncXVldWVUYXNrJywgcXVldWVUYXNrKTsKCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU1KTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBpbml0KCkgewogICAgcmV0dXJuIF9yZWY1LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0IGRlZmF1bHQgewogIGluaXQ6IGluaXQsCiAgcHJlcGFyZVRhc2s6IHByZXBhcmVUYXNrLAogIHF1ZXVlVGFzazogcXVldWVUYXNrLAogIHByb2Nlc3NRdWV1ZTogcHJvY2Vzc1F1ZXVlLAogIHByb2Nlc3NUYXNrOiBwcm9jZXNzVGFzaywKICByZW1vdmVUYXNrOiByZW1vdmVUYXNrCn07"},{"version":3,"sources":["/home/aniket/Desktop/Hact/preorder/node_modules/eslint-loader/index.js??ref--13-0!/home/aniket/Desktop/Hact/preorder/src/task-queue/index.ts"],"names":[],"mappings":"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","sourcesContent":["import StorageManager from '../storage-manager';\nimport emitter from \"../event-bus\"\nimport { client } from \"../api\"\n\nconst prepareTask = () => {\n    const task: any = {};\n    task.taskId = new Date().getTime() + '-' + Math.random();\n    task.transmited = false;\n    task.createdAt = new Date();\n    task.updatedAt = new Date();\n    return task;\n}\nconst queueTask = async (data: any) => {\n    const task = prepareTask();\n    task.url = data.url;\n    task.payload = data.payload;\n    task.callbackEvent = data.callbackEvent;\n    const tasks = await StorageManager.getObject('syncTasks');\n    tasks.push(task);\n    StorageManager.setObject('syncTasks', tasks);\n}\n\nconst removeTask = async (task: any) => {\n    let tasks = await StorageManager.getObject('syncTasks');\n    tasks = tasks.filter((item: any) => {\n        return item.taskId !== task.taskId;\n    });\n    StorageManager.setObject('syncTasks', tasks);\n}\n\nconst processTask = async (task: any) => {\n    // TODO Handle case for expired token and new logged in user\n    client(task.payload).then((data) => {\n        // Add to response as required for callbackEvent\n        task.response = data;\n    }).catch((error) => {\n        task.error = error;\n        // TODO Add error information to Task or remove it after showing message\n        console.error(\"error\", error);\n    }).finally(() => {\n        if (task.callback_event) {\n            if (task.callbackEvent.startsWith('store:')) {\n                // TODO \n                //store.dispatch(task.callback_event.split(':')[1], task)\n            } else {\n                emitter.emit(task.callbackEvent, task)\n            }\n        }\n        removeTask(task);\n    })\n}\n\nconst processQueue = async () => {\n    const tasks = await StorageManager.getObject('syncTasks');\n    tasks.forEach((task: any) => {\n        processTask(task);\n    });\n}\n\nconst init = async () => {\n    let tasks = await StorageManager.getObject('syncTasks');\n    if (!tasks) {\n        tasks = [];\n        await StorageManager.setObject('syncTasks', tasks);\n    }\n    emitter.on('online', processQueue);\n    emitter.on('queueTask', queueTask);\n}\n\nexport default {\n    init,\n    prepareTask,\n    queueTask,\n    processQueue,\n    processTask,\n    removeTask\n}"],"sourceRoot":""}]}