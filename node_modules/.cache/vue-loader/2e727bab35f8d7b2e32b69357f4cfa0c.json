{"remainingRequest":"/home/aniket/Desktop/Hact/preorder/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/aniket/Desktop/Hact/preorder/src/views/promise-date-modal.vue?vue&type=style&index=0&id=1b9e294c&scoped=true&lang=css","dependencies":[{"path":"/home/aniket/Desktop/Hact/preorder/src/views/promise-date-modal.vue","mtime":1634884664340},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/css-loader/dist/cjs.js","mtime":1634884699328},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1634884699752},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/postcss-loader/src/index.js","mtime":1634884699488},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/cache-loader/dist/cjs.js","mtime":1634884698972},{"path":"/home/aniket/Desktop/Hact/preorder/node_modules/vue-loader-v16/dist/index.js","mtime":1634884699380}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CnAgewogICAgcGFkZGluZzogMTZweDsKICAgIGxpbmUtaGVpZ2h0OiAxNjAlOwp9Cg=="},{"version":3,"sources":["/home/aniket/Desktop/Hact/preorder/src/views/promise-date-modal.vue"],"names":[],"mappings":";AAuJA,EAAE;IACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACrB","file":"/home/aniket/Desktop/Hact/preorder/src/views/promise-date-modal.vue","sourceRoot":"","sourcesContent":["<template>\n  <ion-header>\n    <ion-toolbar>\n      <ion-buttons slot=\"start\">\n        <ion-button @click=\"closeModal\"> <ion-icon :icon=\"close\" /></ion-button>\n      </ion-buttons>\n      <ion-title>{{ $t(\"Edit promise date\") }}</ion-title>\n    </ion-toolbar>\n  </ion-header>\n\n  <ion-content>\n    <p>{{ $t(\"Select a new promise date for these orders. This new date will be used for allocating inventory and fulfilling these orders.\")}}</p>\n      \n    <ion-item>\n      <ion-icon slot=\"start\" :icon=\"calendar\" />\n      <ion-label>{{ $t(\"Promised date\") }}</ion-label>\n      <ion-input v-model=\"promisedDatetime\" type=\"date\" :placeholder=\"$t('Select date')\" />\n    </ion-item>\n    \n    <ion-fab slot=\"fixed\" vertical=\"bottom\" horizontal=\"end\">\n      <!-- TODO FIX the disable condition -->\n      <ion-fab-button :disabled=\"disableUpdate\" @click=\"saveAlert\">\n        <ion-icon :icon=\"save\" />\n      </ion-fab-button>\n    </ion-fab>\n  </ion-content>\n</template>\n\n<script lang=\"ts\">\nimport { \n  IonButtons,\n  IonButton,\n  IonContent,\n  IonFab,\n  IonFabButton,\n  IonHeader,\n  IonIcon,\n  IonInput,\n  IonItem,\n  IonLabel,\n  IonTitle,\n  IonToolbar,\n  modalController,\n  alertController } from \"@ionic/vue\";\nimport { defineComponent } from \"vue\";\nimport { close, calendar, save} from \"ionicons/icons\";\nimport { useStore } from \"@/store\";\nimport moment from \"moment\";\nimport { mapGetters } from \"vuex\";\n\nexport default defineComponent({\n  name: \"PromiseDateModal\",\n  props: [ 'item' , 'items'],\n  computed: {\n    ...mapGetters({\n      jobTotal: 'job/getTotal',\n      getSelectedItemsToUpdatePromiseDate: 'order/getSelectedItemsToUpdatePromiseDate',\n    }),\n    disableUpdate(): boolean {\n      return this.promisedDatetime === '' || (this.item && this.item.promisedDatetime && moment(this.item.promisedDatetime, \"YYYY-MM-DD hh:mm:ss.SSS\").format(\"YYYY-MM-DD\") === this.promisedDatetime) ;\n    }\n  },\n  methods: {\n    closeModal() {\n      modalController.dismiss({ dismissed: true });\n    },\n    async saveAlert() {\n      const alert = await alertController.create({\n        header: this.$t(\"Update promise date\"),\n        message: this.$t(\n          \"Are you sure you want to update the promise date for these orders?\"\n        ),\n        buttons: [\n            {\n              text: this.$t(\"Cancel\"),\n            },\n            {\n              text: this.$t(\"Confirm\"),\n              handler: () => {\n                (this.item ? this.updatePromisedDateItem() : this.updatePromiseDateItems()).then(() => {\n                    this.closeModal()\n                  })\n                }\n              }\n            ],\n      });\n      return alert.present();\n    },\n    async updatePromiseDateItems() {\n      // TODO Handle timezone\n      const promisedDatetime = moment(this.promisedDatetime).endOf(\"day\").format(\"YYYY-MM-DD HH:mm:ss.SSS\")\n      const items = this.getSelectedItemsToUpdatePromiseDate(promisedDatetime);\n      const json = JSON.stringify(items);\n      const blob = new Blob([json], { type: 'application/json'});\n      const formData = new FormData();\n      const fileName = \"UpdatePromiseDateItems_\" + Date.now() +\".json\";\n      formData.append(\"uploadedFile\", blob, fileName);\n      formData.append(\"configId\", \"MDM_UPD_ORD_ITM_JSON\");\n      return this.store.dispatch(\"order/updatePromiseDateItems\", {\n          headers: {\n              'Content-Type': 'multipart/form-data;'\n          },\n          data: formData\n      })\n    },\n    async updatePromisedDateItem () {\n      const promisedDatetime = moment(this.promisedDatetime).endOf(\"day\").format(\"YYYY-MM-DD HH:mm:ss.SSS\")\n      return this.store.dispatch(\"order/updatePromiseDateItem\", {\n          orderId: this.item.orderId,\n          orderItemSeqId: this.item.orderItemSeqId,\n          promisedDatetime: promisedDatetime\n        })\n    },\n\n  },\n  beforeMount() {\n    // TODO Set current date\n    if (this.item && this.item.promisedDatetime) this.promisedDatetime = moment(this.item.promisedDatetime).format(\"YYYY-MM-DD\")\n  },\n  setup() {\n   const store = useStore();\n    return {\n      close,\n      calendar,\n      save,\n      store\n    };\n  },\n  components: { \n    IonButtons,\n    IonButton,\n    IonContent,\n    IonFab,\n    IonFabButton,\n    IonHeader,\n    IonIcon,\n    IonInput,\n    IonItem,\n    IonLabel,\n    IonTitle,\n    IonToolbar \n    },\n    data () {\n      return {\n        promisedDatetime : ''\n      }\n    }\n});\n</script>\n\n<style scoped>\np {\n    padding: 16px;\n    line-height: 160%;\n}\n</style>\n"]}]}