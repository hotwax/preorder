/// <reference types="node" />
import type { JSONProgram } from 'jsonc-eslint-parser/lib/parser/ast';
import type { RawSourceMap } from 'source-map';
import type { YAMLProgram } from 'yaml-eslint-parser/lib/ast';

/**
 * @internal
 */
export declare interface CodeGenOptions {
    type?: 'plain' | 'sfc' | 'bare';
    source?: string;
    sourceMap?: boolean;
    filename?: string;
    inSourceMap?: RawSourceMap;
    isGlobal?: boolean;
    locale?: string;
    env?: DevEnv;
    forceStringify?: boolean;
    onWarn?: (msg: string) => void;
    onError?: (msg: string) => void;
}

/**
 * @internal
 */
export declare interface CodeGenResult<ASTNode> {
    code: string;
    ast: ASTNode;
    map?: RawSourceMap;
}

/**
 * Compile i18n resources
 *
 * @param source - the i18n resource source path, you can use glob pattern
 * @param output - the compiled i18n resource output path
 * @param options - {@link CompileOptions}
 *
 * @remarks
 * This functoin is **asyncronous** function. If you want to get about error details, use the handler of {@link CompileOptions} and {@link CompileErrorCodes}
 *
 * @returns `true` when all i18n resource successfuly compile, not `false`
 *
 * @public
 */
export declare function compile(source: string, output: string, options?: CompileOptions): Promise<boolean>;

/**
 * Compile Error Codes
 *
 * @remarks
 * The error codes of {@link compile} function
 *
 * @public
 */
export declare const enum CompileErrorCodes {
    /**
     * Not supported format
     */
    NOT_SUPPORTED_FORMAT = 1,
    /**
     * Internal compile warning
     */
    INTERNAL_COMPILE_WARNING = 2,
    /**
     * Internal compile error
     */
    INTERNAL_COMPILE_ERROR = 3
}

/**
 * Compile Options
 *
 * @remarks
 * This optioins is used at {@link compile} function
 *
 * @public
 */
export declare interface CompileOptions {
    /**
     * Compile Error handler
     */
    onError?: (code: number, source: string, output: string, msg?: string) => void;
    /**
     * Compile handler
     */
    onCompile?: (source: string, output: string) => void;
}

/**
 * @internal
 */
export declare type DevEnv = 'development' | 'production';

/**
 * @internal
 */
export declare function generateJSON(targetSource: string | Buffer, { type, filename, inSourceMap, locale, isGlobal, sourceMap, env, forceStringify }: CodeGenOptions): CodeGenResult<JSONProgram>;

/**
 * @internal
 */
export declare function generateYAML(targetSource: string | Buffer, { type, filename, inSourceMap, locale, isGlobal, sourceMap, env, forceStringify }: CodeGenOptions): CodeGenResult<YAMLProgram>;

export { }
