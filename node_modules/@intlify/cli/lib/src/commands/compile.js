"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.aliases = exports.command = void 0;
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const debug_1 = require("debug");
const api_1 = require("../api");
const i18n_1 = require("../i18n");
const debug = debug_1.debug('@intlify/cli:compile');
exports.command = 'compile';
exports.aliases = 'cp';
exports.describe = i18n_1.t('compile the i18n resources');
const builder = (args) => {
    return args
        .option('source', {
        type: 'string',
        alias: 's',
        describe: i18n_1.t('the i18n resource source path'),
        demandOption: true
    })
        .option('output', {
        type: 'string',
        alias: 'o',
        describe: i18n_1.t('the compiled i18n resource output path')
    });
};
exports.builder = builder;
const handler = async (args) => {
    const output = args.output != null ? path_1.default.resolve(__dirname, args.output) : process.cwd();
    const ret = await api_1.compile(args.source, output, {
        onCompile: (source, output) => {
            console.log(chalk_1.default.green(i18n_1.t('Success compilation: {source} -> {output}', {
                named: { source, output }
            })));
        },
        onError: (code, source, output, msg) => {
            switch (code) {
                case 1 /* NOT_SUPPORTED_FORMAT */:
                    const parsed = path_1.default.parse(source);
                    console.warn(chalk_1.default.yellow(i18n_1.t("{source}: Ignore compilation due to not supported '{ext}'", {
                        named: { ext: parsed.ext }
                    })));
                    break;
                case 2 /* INTERNAL_COMPILE_WARNING */:
                    console.log(chalk_1.default.yellow(i18n_1.t('Warning compilation: {source} -> {output}, {msg}', {
                        named: { source, output, msg }
                    })));
                    break;
                case 3 /* INTERNAL_COMPILE_ERROR */:
                    console.log(chalk_1.default.green(i18n_1.t('Error compilation: {source} -> {output}, {msg}', {
                        named: { source, output, msg }
                    })));
                    break;
                default:
                    break;
            }
        }
    });
    debug('compile: ', ret);
};
exports.handler = handler;
exports.default = {
    command: exports.command,
    aliases: exports.aliases,
    describe: exports.describe,
    builder: exports.builder,
    handler: exports.handler
};
