"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initI18n = exports.t = exports.getLocale = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const shared_1 = require("@intlify/shared");
const core_1 = require("@intlify/core");
const debug_1 = require("debug");
const debug = debug_1.debug('@intlify/cli:i18n');
const DEFAULT_LOCALE = 'en-US';
let resources = null;
let context = null;
async function loadI18nResources() {
    const dirents = await fs_1.promises.readdir(path_1.default.resolve(__dirname, '../../locales'), {
        withFileTypes: true
    });
    return dirents.reduce(async (acc, dir) => {
        if (dir.isFile()) {
            const data = await fs_1.promises.readFile(path_1.default.resolve(__dirname, '../../locales', dir.name), { encoding: 'utf-8' });
            const { name } = path_1.default.parse(dir.name);
            debug('load i18n resource', name, data);
            const messages = await acc;
            messages[name] = JSON.parse(data);
        }
        return acc;
    }, Promise.resolve({}));
}
function getLocale(env) {
    env = env || process.env;
    const raw = (env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE) ||
        DEFAULT_LOCALE;
    debug('getLocale', raw);
    return raw.replace(/\.UTF\-8/g, '').replace(/_/g, '-');
}
exports.getLocale = getLocale;
function t(key, options) {
    if (context == null) {
        console.error('cannot initialize CoreContext with @intlify/core createCoreContext');
        return key;
    }
    const ret = core_1.translate(context, key, options);
    return shared_1.isString(ret) ? ret : key;
}
exports.t = t;
async function initI18n() {
    try {
        resources = await loadI18nResources();
        context = core_1.createCoreContext({
            locale: getLocale(),
            fallbackLocale: DEFAULT_LOCALE,
            fallbackWarn: false,
            missingWarn: false,
            warnHtmlMessage: false,
            fallbackFormat: true,
            messages: resources
        });
    }
    catch (e) {
        debug('load i18n resource errors', e.message);
        throw e;
    }
}
exports.initI18n = initI18n;
