"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const loader_utils_1 = __importDefault(require("loader-utils"));
const querystring_1 = require("querystring");
const shared_1 = require("@intlify/shared");
const cli_1 = require("@intlify/cli");
const loader = function (source, sourceMap) {
    const loaderContext = this; // eslint-disable-line @typescript-eslint/no-this-alias
    const query = querystring_1.parse(loaderContext.resourceQuery);
    const options = getOptions(loaderContext, query, sourceMap);
    // console.log('query', this.resourcePath, this.resourceQuery, query, source)
    const langInfo = !shared_1.isEmptyObject(query)
        ? shared_1.isString(query.lang)
            ? query.lang
            : 'json'
        : path_1.default.parse(loaderContext.resourcePath).ext;
    try {
        this.cacheable && this.cacheable();
        // if (sourceMap) {
        //   console.log('in map', sourceMap)
        // }
        // if (sourceMap) {
        //   const s = new SourceMapConsumer(sourceMap)
        //   console.log('sourcemap raw', sourceMap)
        //   s.eachMapping(m => {
        //     console.log(m)
        //   })
        // }
        const generate = /json5?/.test(langInfo) ? cli_1.generateJSON : cli_1.generateYAML;
        const { code, map } = generate(source, options);
        // console.log('code', code)
        this.callback(null, code, map);
    }
    catch (err) {
        this.emitError(`[vue-i18n-loader]: ${err.message}`);
    }
};
function getOptions(loaderContext, query, inSourceMap) {
    const loaderOptions = loader_utils_1.default.getOptions(loaderContext) || {};
    const { resourcePath: filename, mode, sourceMap } = loaderContext;
    const { forceStringify } = loaderOptions;
    const baseOptions = {
        filename,
        sourceMap,
        inSourceMap,
        forceStringify,
        env: mode,
        onWarn: (msg) => {
            loaderContext.emitWarning(`[vue-i18n-loader]: ${loaderContext.resourcePath} ${msg}`);
        },
        onError: (msg) => {
            loaderContext.emitError(`[vue-i18n-loader]: ${loaderContext.resourcePath} ${msg}`);
        }
    };
    if (!shared_1.isEmptyObject(query)) {
        return Object.assign(baseOptions, {
            type: 'sfc',
            locale: shared_1.isString(query.locale) ? query.locale : '',
            isGlobal: query.global != null
        });
    }
    else {
        return Object.assign(baseOptions, {
            type: 'plain',
            isGlobal: false
        });
    }
}
exports.default = loader;
