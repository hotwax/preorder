import type { JSX } from '@ionic/core';
export declare const IonAvatar: import("vue").DefineComponent<JSX.IonAvatar & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonBackdrop: import("vue").DefineComponent<JSX.IonBackdrop & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    visible?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    tappable?: boolean;
    stopPropagation?: boolean;
    onIonBackdropTap?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const IonBadge: import("vue").DefineComponent<JSX.IonBadge & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonButton: import("vue").DefineComponent<JSX.IonButton & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    strong?: boolean;
    fill?: "default" | "clear" | "outline" | "solid";
    mode?: "ios" | "md";
    type?: "button" | "reset" | "submit";
    constructor?: Function;
    color?: string;
    size?: "small" | "default" | "large";
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    buttonType?: string;
    expand?: "full" | "block";
    routerDirection?: import("@ionic/core").RouterDirection;
    routerAnimation?: import("@ionic/core").AnimationBuilder;
    download?: string;
    href?: string;
    rel?: string;
    shape?: "round";
    target?: string;
    onIonBlur?: (event: CustomEvent<void>) => void;
    onIonFocus?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const IonButtons: import("vue").DefineComponent<JSX.IonButtons & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    collapse?: boolean;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonCard: import("vue").DefineComponent<JSX.IonCard & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    button?: boolean;
    mode?: "ios" | "md";
    type?: "button" | "reset" | "submit";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    routerDirection?: import("@ionic/core").RouterDirection;
    routerAnimation?: import("@ionic/core").AnimationBuilder;
    download?: string;
    href?: string;
    rel?: string;
    target?: string;
}>, {}>;
export declare const IonCardContent: import("vue").DefineComponent<JSX.IonCardContent & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonCardHeader: import("vue").DefineComponent<JSX.IonCardHeader & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    translucent?: boolean;
}>, {}>;
export declare const IonCardSubtitle: import("vue").DefineComponent<JSX.IonCardSubtitle & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonCardTitle: import("vue").DefineComponent<JSX.IonCardTitle & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonCheckbox: import("vue").DefineComponent<JSX.IonCheckbox & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    mode?: "ios" | "md";
    name?: string;
    indeterminate?: boolean;
    value?: string;
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonBlur?: (event: CustomEvent<void>) => void;
    onIonFocus?: (event: CustomEvent<void>) => void;
    checked?: boolean;
    onIonChange?: (event: CustomEvent<import("@ionic/core").CheckboxChangeEventDetail>) => void;
}>, {}>;
export declare const IonChip: import("vue").DefineComponent<JSX.IonChip & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    mode?: "ios" | "md";
    outline?: boolean;
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonCol: import("vue").DefineComponent<JSX.IonCol & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    push?: string;
    constructor?: Function;
    size?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    offset?: string;
    offsetXs?: string;
    offsetSm?: string;
    offsetMd?: string;
    offsetLg?: string;
    offsetXl?: string;
    pull?: string;
    pullXs?: string;
    pullSm?: string;
    pullMd?: string;
    pullLg?: string;
    pullXl?: string;
    pushXs?: string;
    pushSm?: string;
    pushMd?: string;
    pushLg?: string;
    pushXl?: string;
    sizeXs?: string;
    sizeSm?: string;
    sizeMd?: string;
    sizeLg?: string;
    sizeXl?: string;
}>, {}>;
export declare const IonContent: import("vue").DefineComponent<JSX.IonContent & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    fullscreen?: boolean;
    forceOverscroll?: boolean;
    scrollX?: boolean;
    scrollY?: boolean;
    scrollEvents?: boolean;
    onIonScroll?: (event: CustomEvent<import("@ionic/core").ScrollDetail>) => void;
    onIonScrollEnd?: (event: CustomEvent<import("@ionic/core").ScrollBaseDetail>) => void;
    onIonScrollStart?: (event: CustomEvent<import("@ionic/core").ScrollBaseDetail>) => void;
}>, {}>;
export declare const IonDatetime: import("vue").DefineComponent<JSX.IonDatetime & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    max?: string;
    disabled?: boolean;
    readonly?: boolean;
    mode?: "ios" | "md";
    name?: string;
    value?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonBlur?: (event: CustomEvent<void>) => void;
    onIonFocus?: (event: CustomEvent<void>) => void;
    onIonChange?: (event: CustomEvent<import("@ionic/core").DatetimeChangeEventDetail>) => void;
    min?: string;
    displayFormat?: string;
    displayTimezone?: string;
    pickerFormat?: string;
    cancelText?: string;
    doneText?: string;
    yearValues?: string | number | number[];
    monthValues?: string | number | number[];
    dayValues?: string | number | number[];
    hourValues?: string | number | number[];
    minuteValues?: string | number | number[];
    monthNames?: string | string[];
    monthShortNames?: string | string[];
    dayNames?: string | string[];
    dayShortNames?: string | string[];
    pickerOptions?: Partial<import("@ionic/core").PickerOptions>;
    placeholder?: string;
    onIonCancel?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const IonFab: import("vue").DefineComponent<JSX.IonFab & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    activated?: boolean;
    constructor?: Function;
    horizontal?: LineAlignSetting;
    vertical?: "center" | "bottom" | "top";
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    edge?: boolean;
}>, {}>;
export declare const IonFabButton: import("vue").DefineComponent<JSX.IonFabButton & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    show?: boolean;
    disabled?: boolean;
    activated?: boolean;
    mode?: "ios" | "md";
    type?: "button" | "reset" | "submit";
    constructor?: Function;
    color?: string;
    size?: "small";
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    routerDirection?: import("@ionic/core").RouterDirection;
    routerAnimation?: import("@ionic/core").AnimationBuilder;
    download?: string;
    href?: string;
    rel?: string;
    target?: string;
    onIonBlur?: (event: CustomEvent<void>) => void;
    onIonFocus?: (event: CustomEvent<void>) => void;
    translucent?: boolean;
    closeIcon?: string;
}>, {}>;
export declare const IonFabList: import("vue").DefineComponent<JSX.IonFabList & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    activated?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    side?: "end" | "start" | "bottom" | "top";
}>, {}>;
export declare const IonFooter: import("vue").DefineComponent<JSX.IonFooter & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    translucent?: boolean;
}>, {}>;
export declare const IonGrid: import("vue").DefineComponent<JSX.IonGrid & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    fixed?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonHeader: import("vue").DefineComponent<JSX.IonHeader & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    collapse?: "condense";
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    translucent?: boolean;
}>, {}>;
export declare const IonImg: import("vue").DefineComponent<JSX.IonImg & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    alt?: string;
    src?: string;
    onIonError?: (event: CustomEvent<void>) => void;
    onIonImgDidLoad?: (event: CustomEvent<void>) => void;
    onIonImgWillLoad?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const IonInfiniteScroll: import("vue").DefineComponent<JSX.IonInfiniteScroll & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    threshold?: string;
    position?: "bottom" | "top";
    onIonInfinite?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const IonInfiniteScrollContent: import("vue").DefineComponent<JSX.IonInfiniteScrollContent & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    loadingSpinner?: "bubbles" | "circles" | "circular" | "crescent" | "dots" | "lines" | "lines-small";
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    loadingText?: string | import("@ionic/core").IonicSafeString;
}>, {}>;
export declare const IonInput: import("vue").DefineComponent<JSX.IonInput & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    max?: string;
    required?: boolean;
    disabled?: boolean;
    pattern?: string;
    readonly?: boolean;
    mode?: "ios" | "md";
    name?: string;
    type?: import("@ionic/core").TextFieldTypes;
    value?: string | number;
    constructor?: Function;
    color?: string;
    size?: number;
    multiple?: boolean;
    step?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonBlur?: (event: CustomEvent<FocusEvent>) => void;
    onIonFocus?: (event: CustomEvent<FocusEvent>) => void;
    onIonChange?: (event: CustomEvent<import("@ionic/core").InputChangeEventDetail>) => void;
    min?: string;
    placeholder?: string;
    accept?: string;
    autocapitalize?: string;
    autocomplete?: import("@ionic/core").AutocompleteTypes;
    autocorrect?: "on" | "off";
    autofocus?: boolean;
    clearInput?: boolean;
    clearOnEdit?: boolean;
    debounce?: number;
    enterkeyhint?: "search" | "enter" | "next" | "done" | "go" | "previous" | "send";
    inputmode?: "search" | "none" | "text" | "decimal" | "email" | "tel" | "url" | "numeric";
    maxlength?: number;
    minlength?: number;
    spellcheck?: boolean;
    onIonInput?: (event: CustomEvent<KeyboardEvent>) => void;
}>, {}>;
export declare const IonItem: import("vue").DefineComponent<JSX.IonItem & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    button?: boolean;
    mode?: "ios" | "md";
    lines?: "none" | "full" | "inset";
    type?: "button" | "reset" | "submit";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    routerDirection?: import("@ionic/core").RouterDirection;
    routerAnimation?: import("@ionic/core").AnimationBuilder;
    download?: string;
    href?: string;
    rel?: string;
    target?: string;
    detail?: boolean;
    detailIcon?: string;
}>, {}>;
export declare const IonItemDivider: import("vue").DefineComponent<JSX.IonItemDivider & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    color?: string;
    sticky?: boolean;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonItemGroup: import("vue").DefineComponent<JSX.IonItemGroup & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonItemOption: import("vue").DefineComponent<JSX.IonItemOption & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    mode?: "ios" | "md";
    type?: "button" | "reset" | "submit";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    download?: string;
    href?: string;
    rel?: string;
    target?: string;
    expandable?: boolean;
}>, {}>;
export declare const IonItemOptions: import("vue").DefineComponent<JSX.IonItemOptions & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    side?: import("@ionic/core").Side;
    onIonSwipe?: (event: CustomEvent<any>) => void;
}>, {}>;
export declare const IonItemSliding: import("vue").DefineComponent<JSX.IonItemSliding & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonDrag?: (event: CustomEvent<any>) => void;
}>, {}>;
export declare const IonLabel: import("vue").DefineComponent<JSX.IonLabel & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    position?: "fixed" | "stacked" | "floating";
}>, {}>;
export declare const IonList: import("vue").DefineComponent<JSX.IonList & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    lines?: "none" | "full" | "inset";
    inset?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonListHeader: import("vue").DefineComponent<JSX.IonListHeader & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    lines?: "none" | "full" | "inset";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonMenu: import("vue").DefineComponent<JSX.IonMenu & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    type?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    side?: import("@ionic/core").Side;
    contentId?: string;
    menuId?: string;
    swipeGesture?: boolean;
    maxEdgeStart?: number;
    onIonDidClose?: (event: CustomEvent<void>) => void;
    onIonDidOpen?: (event: CustomEvent<void>) => void;
    onIonWillClose?: (event: CustomEvent<void>) => void;
    onIonWillOpen?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const IonMenuButton: import("vue").DefineComponent<JSX.IonMenuButton & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    menu?: string;
    mode?: "ios" | "md";
    type?: "button" | "reset" | "submit";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    autoHide?: boolean;
}>, {}>;
export declare const IonMenuToggle: import("vue").DefineComponent<JSX.IonMenuToggle & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    menu?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    autoHide?: boolean;
}>, {}>;
export declare const IonNav: import("vue").DefineComponent<JSX.IonNav & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    root?: import("@ionic/core").NavComponent;
    animated?: boolean;
    constructor?: Function;
    animation?: import("@ionic/core").AnimationBuilder;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    swipeGesture?: boolean;
    rootParams?: unknown;
    onIonNavDidChange?: (event: CustomEvent<void>) => void;
    onIonNavWillChange?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const IonNavLink: import("vue").DefineComponent<JSX.IonNavLink & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    component?: import("@ionic/core").NavComponent;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    routerDirection?: import("@ionic/core").RouterDirection;
    routerAnimation?: import("@ionic/core").AnimationBuilder;
    componentProps?: unknown;
}>, {}>;
export declare const IonNote: import("vue").DefineComponent<JSX.IonNote & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonProgressBar: import("vue").DefineComponent<JSX.IonProgressBar & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    type?: "determinate" | "indeterminate";
    value?: number;
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    reversed?: boolean;
    buffer?: number;
}>, {}>;
export declare const IonRadio: import("vue").DefineComponent<JSX.IonRadio & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value: any;
} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    mode?: "ios" | "md";
    name?: string;
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonBlur?: (event: CustomEvent<void>) => void;
    onIonFocus?: (event: CustomEvent<void>) => void;
}>, {
    value: any;
}>;
export declare const IonRadioGroup: import("vue").DefineComponent<JSX.IonRadioGroup & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value: any;
} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    name?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonChange?: (event: CustomEvent<import("@ionic/core").RadioGroupChangeEventDetail>) => void;
    allowEmptySelection?: boolean;
}>, {
    value: any;
}>;
export declare const IonRange: import("vue").DefineComponent<JSX.IonRange & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    max?: number;
    disabled?: boolean;
    mode?: "ios" | "md";
    name?: string;
    value?: import("@ionic/core").RangeValue;
    constructor?: Function;
    color?: string;
    step?: number;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonBlur?: (event: CustomEvent<void>) => void;
    onIonFocus?: (event: CustomEvent<void>) => void;
    onIonChange?: (event: CustomEvent<import("@ionic/core").RangeChangeEventDetail>) => void;
    min?: number;
    debounce?: number;
    dualKnobs?: boolean;
    pin?: boolean;
    snaps?: boolean;
    ticks?: boolean;
}>, {}>;
export declare const IonRefresher: import("vue").DefineComponent<JSX.IonRefresher & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    pullMin?: number;
    pullMax?: number;
    closeDuration?: string;
    snapbackDuration?: string;
    pullFactor?: number;
    onIonPull?: (event: CustomEvent<void>) => void;
    onIonRefresh?: (event: CustomEvent<import("@ionic/core").RefresherEventDetail>) => void;
    onIonStart?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const IonRefresherContent: import("vue").DefineComponent<JSX.IonRefresherContent & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    refreshingSpinner?: "bubbles" | "circles" | "circular" | "crescent" | "dots" | "lines" | "lines-small";
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    pullingIcon?: string;
    pullingText?: string | import("@ionic/core").IonicSafeString;
    refreshingText?: string | import("@ionic/core").IonicSafeString;
}>, {}>;
export declare const IonReorder: import("vue").DefineComponent<JSX.IonReorder & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonReorderGroup: import("vue").DefineComponent<JSX.IonReorderGroup & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonItemReorder?: (event: CustomEvent<import("@ionic/core").ItemReorderEventDetail>) => void;
}>, {}>;
export declare const IonRippleEffect: import("vue").DefineComponent<JSX.IonRippleEffect & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    type?: "bounded" | "unbounded";
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonRow: import("vue").DefineComponent<JSX.IonRow & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonSearchbar: import("vue").DefineComponent<JSX.IonSearchbar & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    mode?: "ios" | "md";
    animated?: boolean;
    type?: "number" | "search" | "password" | "text" | "email" | "tel" | "url";
    value?: string;
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonBlur?: (event: CustomEvent<void>) => void;
    onIonFocus?: (event: CustomEvent<void>) => void;
    onIonChange?: (event: CustomEvent<import("@ionic/core").SearchbarChangeEventDetail>) => void;
    placeholder?: string;
    onIonCancel?: (event: CustomEvent<void>) => void;
    autocomplete?: import("@ionic/core").AutocompleteTypes;
    autocorrect?: "on" | "off";
    debounce?: number;
    enterkeyhint?: "search" | "enter" | "next" | "done" | "go" | "previous" | "send";
    inputmode?: "search" | "none" | "text" | "decimal" | "email" | "tel" | "url" | "numeric";
    spellcheck?: boolean;
    onIonInput?: (event: CustomEvent<KeyboardEvent>) => void;
    cancelButtonIcon?: string;
    cancelButtonText?: string;
    clearIcon?: string;
    searchIcon?: string;
    showCancelButton?: "focus" | "always" | "never";
    onIonClear?: (event: CustomEvent<void>) => void;
}>, {}>;
export declare const IonSegment: import("vue").DefineComponent<JSX.IonSegment & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    mode?: "ios" | "md";
    value?: string;
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonChange?: (event: CustomEvent<import("@ionic/core").SegmentChangeEventDetail>) => void;
    swipeGesture?: boolean;
    scrollable?: boolean;
}>, {}>;
export declare const IonSegmentButton: import("vue").DefineComponent<JSX.IonSegmentButton & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    mode?: "ios" | "md";
    type?: "button" | "reset" | "submit";
    value?: string;
    constructor?: Function;
    layout?: import("@ionic/core").SegmentButtonLayout;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonSelect: import("vue").DefineComponent<JSX.IonSelect & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value: any;
    interfaceOptions: any;
} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    mode?: "ios" | "md";
    name?: string;
    constructor?: Function;
    multiple?: boolean;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonBlur?: (event: CustomEvent<void>) => void;
    onIonFocus?: (event: CustomEvent<void>) => void;
    onIonChange?: (event: CustomEvent<import("@ionic/core").SelectChangeEventDetail<any>>) => void;
    cancelText?: string;
    placeholder?: string;
    onIonCancel?: (event: CustomEvent<void>) => void;
    okText?: string;
    selectedText?: string;
    interface?: import("@ionic/core").SelectInterface;
    compareWith?: string | import("@ionic/core").SelectCompareFn;
}>, {
    value: any;
    interfaceOptions: any;
}>;
export declare const IonSelectOption: import("vue").DefineComponent<JSX.IonSelectOption & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value: any;
} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {
    value: any;
}>;
export declare const IonSkeletonText: import("vue").DefineComponent<JSX.IonSkeletonText & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    animated?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonSlide: import("vue").DefineComponent<JSX.IonSlide & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonSlides: import("vue").DefineComponent<JSX.IonSlides & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    options: any;
} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    scrollbar?: boolean;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    pager?: boolean;
    onIonSlideDidChange?: (event: CustomEvent<void>) => void;
    onIonSlideDoubleTap?: (event: CustomEvent<void>) => void;
    onIonSlideDrag?: (event: CustomEvent<void>) => void;
    onIonSlideNextEnd?: (event: CustomEvent<void>) => void;
    onIonSlideNextStart?: (event: CustomEvent<void>) => void;
    onIonSlidePrevEnd?: (event: CustomEvent<void>) => void;
    onIonSlidePrevStart?: (event: CustomEvent<void>) => void;
    onIonSlideReachEnd?: (event: CustomEvent<void>) => void;
    onIonSlideReachStart?: (event: CustomEvent<void>) => void;
    onIonSlideTap?: (event: CustomEvent<void>) => void;
    onIonSlideTouchEnd?: (event: CustomEvent<void>) => void;
    onIonSlideTouchStart?: (event: CustomEvent<void>) => void;
    onIonSlideTransitionEnd?: (event: CustomEvent<void>) => void;
    onIonSlideTransitionStart?: (event: CustomEvent<void>) => void;
    onIonSlideWillChange?: (event: CustomEvent<void>) => void;
    onIonSlidesDidLoad?: (event: CustomEvent<void>) => void;
}>, {
    options: any;
}>;
export declare const IonSpinner: import("vue").DefineComponent<JSX.IonSpinner & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    paused?: boolean;
    name?: "bubbles" | "circles" | "circular" | "crescent" | "dots" | "lines" | "lines-small";
    constructor?: Function;
    color?: string;
    duration?: number;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonSplitPane: import("vue").DefineComponent<JSX.IonSplitPane & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    contentId?: string;
    when?: string | boolean;
    onIonSplitPaneVisible?: (event: CustomEvent<{
        visible: boolean;
    }>) => void;
}>, {}>;
export declare const IonText: import("vue").DefineComponent<JSX.IonText & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonTextarea: import("vue").DefineComponent<JSX.IonTextarea & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    required?: boolean;
    disabled?: boolean;
    readonly?: boolean;
    mode?: "ios" | "md";
    name?: string;
    value?: string;
    constructor?: Function;
    color?: string;
    wrap?: "off" | "hard" | "soft";
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonBlur?: (event: CustomEvent<FocusEvent>) => void;
    onIonFocus?: (event: CustomEvent<FocusEvent>) => void;
    onIonChange?: (event: CustomEvent<import("@ionic/core").TextareaChangeEventDetail>) => void;
    placeholder?: string;
    autocapitalize?: string;
    autofocus?: boolean;
    clearOnEdit?: boolean;
    debounce?: number;
    enterkeyhint?: "search" | "enter" | "next" | "done" | "go" | "previous" | "send";
    inputmode?: "search" | "none" | "text" | "decimal" | "email" | "tel" | "url" | "numeric";
    maxlength?: number;
    minlength?: number;
    spellcheck?: boolean;
    onIonInput?: (event: CustomEvent<KeyboardEvent>) => void;
    cols?: number;
    rows?: number;
    autoGrow?: boolean;
}>, {}>;
export declare const IonThumbnail: import("vue").DefineComponent<JSX.IonThumbnail & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonTitle: import("vue").DefineComponent<JSX.IonTitle & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    color?: string;
    size?: "small" | "large";
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonToggle: import("vue").DefineComponent<JSX.IonToggle & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    disabled?: boolean;
    mode?: "ios" | "md";
    name?: string;
    value?: string;
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    onIonBlur?: (event: CustomEvent<void>) => void;
    onIonFocus?: (event: CustomEvent<void>) => void;
    checked?: boolean;
    onIonChange?: (event: CustomEvent<import("@ionic/core").ToggleChangeEventDetail>) => void;
}>, {}>;
export declare const IonToolbar: import("vue").DefineComponent<JSX.IonToolbar & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    mode?: "ios" | "md";
    constructor?: Function;
    color?: string;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
}>, {}>;
export declare const IonVirtualScroll: import("vue").DefineComponent<JSX.IonVirtualScroll & import("./vue-component-lib/utils").InputProps, object, any, Record<string, import("@vue/reactivity").ComputedGetter<any> | import("vue").WritableComputedOptions<any>>, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    toString?: string;
    valueOf?: unknown;
    toLocaleString?: string;
    constructor?: Function;
    modelValue?: string | boolean;
    hasOwnProperty?: (v: string | number | symbol) => boolean;
    isPrototypeOf?: (v: Object) => boolean;
    propertyIsEnumerable?: (v: string | number | symbol) => boolean;
    approxItemHeight?: number;
    approxHeaderHeight?: number;
    approxFooterHeight?: number;
    headerFn?: import("@ionic/core").HeaderFn;
    footerFn?: import("@ionic/core").HeaderFn;
    items?: unknown;
    itemHeight?: import("@ionic/core").ItemHeightFn;
    headerHeight?: import("@ionic/core").HeaderHeightFn;
    footerHeight?: import("@ionic/core").FooterHeightFn;
    renderItem?: (item: any, index: number) => any;
    renderHeader?: (item: any, index: number) => any;
    renderFooter?: (item: any, index: number) => any;
    nodeRender?: import("@ionic/core").ItemRenderFn;
}>, {}>;
