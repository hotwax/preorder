{
  "$schema": "http://json.schemastore.org/web-types",
  "framework": "vue",
  "name": "@ionic/vue",
  "version": "5.5.3",
  "contributions": {
    "html": {
      "types-syntax": "typescript",
      "description-markup": "markdown",
      "tags": [
        {
          "name": "IonActionSheet",
          "doc-url": "https://ionicframework.com/docs/api/action-sheet",
          "description": "An Action Sheet is a dialog that displays a set of options. It appears on top of the app's content, and must be manually dismissed by the user before they can resume interaction with the app. Destructive options are made obvious in `ios` mode. There are multiple ways to dismiss the action sheet, including tapping the backdrop or hitting the escape key on desktop.",
          "source": {
            "module": "@ionic/core/dist/types/components/action-sheet/action-sheet.d.ts",
            "symbol": "ActionSheet"
          },
          "attributes": [
            {
              "name": "animated",
              "description": "If `true`, the action sheet will animate.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "backdrop-dismiss",
              "description": "If `true`, the action sheet will be dismissed when the backdrop is clicked.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "buttons",
              "description": "An array of buttons for the action sheet.",
              "required": false,
              "default": "[]",
              "value": {
                "kind": "expression",
                "type": "(string | ActionSheetButton)[]"
              }
            },
            {
              "name": "css-class",
              "description": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "enterAnimation",
              "description": "Animation to use when the action sheet is presented.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "header",
              "description": "Title for the action sheet.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "keyboard-close",
              "description": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "leaveAnimation",
              "description": "Animation to use when the action sheet is dismissed.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "sub-header",
              "description": "Subtitle for the action sheet.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "translucent",
              "description": "If `true`, the action sheet will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "onDidDismiss",
              "description": "Emitted after the alert has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onDidPresent",
              "description": "Emitted after the alert has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "onWillDismiss",
              "description": "Emitted before the alert has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onWillPresent",
              "description": "Emitted before the alert has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonAlert",
          "doc-url": "https://ionicframework.com/docs/api/alert",
          "description": "An Alert is a dialog that presents users with information or collects information from the user using inputs. An alert appears on top of the app's content, and must be manually dismissed by the user before they can resume interaction with the app. It can also optionally have a `header`, `subHeader` and `message`.",
          "source": {
            "module": "@ionic/core/dist/types/components/alert/alert.d.ts",
            "symbol": "Alert"
          },
          "attributes": [
            {
              "name": "animated",
              "description": "If `true`, the alert will animate.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "backdrop-dismiss",
              "description": "If `true`, the alert will be dismissed when the backdrop is clicked.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "buttons",
              "description": "Array of buttons to be added to the alert.",
              "required": false,
              "default": "[]",
              "value": {
                "kind": "expression",
                "type": "(string | AlertButton)[]"
              }
            },
            {
              "name": "css-class",
              "description": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "enterAnimation",
              "description": "Animation to use when the alert is presented.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "header",
              "description": "The main title in the heading of the alert.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "inputs",
              "description": "Array of input to show in the alert.",
              "required": false,
              "default": "[]",
              "value": {
                "kind": "expression",
                "type": "AlertInput[]"
              }
            },
            {
              "name": "keyboard-close",
              "description": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "leaveAnimation",
              "description": "Animation to use when the alert is dismissed.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "message",
              "description": "The main message to be displayed in the alert.\n`message` can accept either plaintext or HTML as a string.\nTo display characters normally reserved for HTML, they\nmust be escaped. For example `<Ionic>` would become\n`&lt;Ionic&gt;`\n\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "IonicSafeString | string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "sub-header",
              "description": "The subtitle in the heading of the alert. Displayed under the title.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "translucent",
              "description": "If `true`, the alert will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "onDidDismiss",
              "description": "Emitted after the alert has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onDidPresent",
              "description": "Emitted after the alert has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "onWillDismiss",
              "description": "Emitted before the alert has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onWillPresent",
              "description": "Emitted before the alert has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonAvatar",
          "doc-url": "https://ionicframework.com/docs/api/avatar",
          "description": "Avatars are circular components that usually wrap an image or icon. They can be used to represent a person or an object.\n\nAvatars can be used by themselves or inside of any element. If placed inside of an `ion-chip` or `ion-item`, the avatar will resize to fit the parent component. To position an avatar on the left or right side of an item, set the slot to `start` or `end`, respectively.",
          "source": {
            "module": "@ionic/core/dist/types/components/avatar/avatar.d.ts",
            "symbol": "Avatar"
          },
          "attributes": [],
          "slots": [],
          "events": []
        },
        {
          "name": "IonBackButton",
          "doc-url": "https://ionicframework.com/docs/api/back-button",
          "description": "The back button navigates back in the app's history upon click. It is smart enough to know what to render based on the mode and when to show based on the navigation stack.\n\nTo change what is displayed in the back button, use the `text` and `icon` properties.",
          "source": {
            "module": "@ionic/core/dist/types/components/back-button/back-button.d.ts",
            "symbol": "BackButton"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "default-href",
              "description": "The url to navigate back to by default when there is no history.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the button.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "icon",
              "description": "The icon name to use for the back button.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "routerAnimation",
              "description": "When using a router, it specifies the transition animation when navigating to\nanother page.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "text",
              "description": "The text to display in the back button.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            },
            {
              "name": "type",
              "description": "The type of the button.",
              "required": false,
              "default": "'button'",
              "value": {
                "kind": "expression",
                "type": "\"button\" | \"reset\" | \"submit\""
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonBackdrop",
          "doc-url": "https://ionicframework.com/docs/api/backdrop",
          "description": "Backdrops are full screen components that overlay other components. They are useful behind components that transition in on top of other content and can be used to dismiss that component.",
          "source": {
            "module": "@ionic/core/dist/types/components/backdrop/backdrop.d.ts",
            "symbol": "Backdrop"
          },
          "attributes": [
            {
              "name": "stop-propagation",
              "description": "If `true`, the backdrop will stop propagation on tap.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "tappable",
              "description": "If `true`, the backdrop will can be clicked and will emit the `ionBackdropTap` event.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "visible",
              "description": "If `true`, the backdrop will be visible.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "onTap",
              "description": "Emitted when the backdrop is tapped.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonBadge",
          "doc-url": "https://ionicframework.com/docs/api/badge",
          "description": "Badges are inline block elements that usually appear near another element. Typically they contain a number or other characters. They can be used as a notification that there are additional items associated with an element and indicate how many items there are.",
          "source": {
            "module": "@ionic/core/dist/types/components/badge/badge.d.ts",
            "symbol": "Badge"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonButton",
          "doc-url": "https://ionicframework.com/docs/api/button",
          "description": "Buttons provide a clickable element, which can be used in forms, or anywhere that needs simple, standard button functionality. They may display text, icons, or both. Buttons can be styled with several attributes to look a specific way.",
          "source": {
            "module": "@ionic/core/dist/types/components/button/button.d.ts",
            "symbol": "Button"
          },
          "attributes": [
            {
              "name": "button-type",
              "description": "The type of button.",
              "required": false,
              "default": "'button'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the button.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "download",
              "description": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "expand",
              "description": "Set to `\"block\"` for a full-width button or to `\"full\"` for a full-width button\nwithout left and right borders.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"block\" | \"full\" | undefined"
              }
            },
            {
              "name": "fill",
              "description": "Set to `\"clear\"` for a transparent button, to `\"outline\"` for a transparent\nbutton with a border, or to `\"solid\"`. The default style is `\"solid\"` except inside of\na toolbar, where the default is `\"clear\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"clear\" | \"default\" | \"outline\" | \"solid\" | undefined"
              }
            },
            {
              "name": "href",
              "description": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "rel",
              "description": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "routerAnimation",
              "description": "When using a router, it specifies the transition animation when navigating to\nanother page using `href`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "router-direction",
              "description": "When using a router, it specifies the transition direction when navigating to\nanother page using `href`.",
              "required": false,
              "default": "'forward'",
              "value": {
                "kind": "expression",
                "type": "\"back\" | \"forward\" | \"root\""
              }
            },
            {
              "name": "shape",
              "description": "The button shape.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"round\" | undefined"
              }
            },
            {
              "name": "size",
              "description": "The button size.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"default\" | \"large\" | \"small\" | undefined"
              }
            },
            {
              "name": "strong",
              "description": "If `true`, activates a button with a heavier font weight.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "target",
              "description": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "type",
              "description": "The type of the button.",
              "required": false,
              "default": "'button'",
              "value": {
                "kind": "expression",
                "type": "\"button\" | \"reset\" | \"submit\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Content is placed between the named slots if provided without a slot."
            },
            {
              "name": "end",
              "description": "Content is placed to the right of the button text in LTR, and to the left in RTL."
            },
            {
              "name": "icon-only",
              "description": "Should be used on an icon in a button that has no text."
            },
            {
              "name": "start",
              "description": "Content is placed to the left of the button text in LTR, and to the right in RTL."
            }
          ],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the button loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the button has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonButtons",
          "doc-url": "https://ionicframework.com/docs/api/buttons",
          "description": "The Buttons component is a container element. Buttons placed in a toolbar should be placed inside of the `<ion-buttons>` element.\n\nThe `<ion-buttons>` element can be positioned inside of the toolbar using a named slot. The below chart has a description of each slot.\n\n| Slot         | Description                                                                                              |\n|--------------|----------------------------------------------------------------------------------------------------------|\n| `secondary`  | Positions element to the `left` of the content in `ios` mode, and directly to the `right` in `md` mode.  |\n| `primary`    | Positions element to the `right` of the content in `ios` mode, and to the far `right` in `md` mode.      |\n| `start`      | Positions to the `left` of the content in LTR, and to the `right` in RTL.                                |\n| `end`        | Positions to the `right` of the content in LTR, and to the `left` in RTL.                                |",
          "source": {
            "module": "@ionic/core/dist/types/components/buttons/buttons.d.ts",
            "symbol": "Buttons"
          },
          "attributes": [
            {
              "name": "collapse",
              "description": "If true, buttons will disappear when its\nparent toolbar has fully collapsed if the toolbar\nis not the first toolbar. If the toolbar is the\nfirst toolbar, the buttons will be hidden and will\nonly be shown once all toolbars have fully collapsed.\n\nOnly applies in `ios` mode with `collapse` set to\n`true` on `ion-header`.\n\nTypically used for [Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonCard",
          "doc-url": "https://ionicframework.com/docs/api/card",
          "description": "Cards are a standard piece of UI that serves as an entry point to more detailed\ninformation. A card can be a single component, but is often made up of some\nheader, title, subtitle, and content. `ion-card` is broken up into several\nsub-components to reflect this. Please see `ion-card-content`,\n`ion-card-header`, `ion-card-title`, `ion-card-subtitle`.",
          "source": {
            "module": "@ionic/core/dist/types/components/card/card.d.ts",
            "symbol": "Card"
          },
          "attributes": [
            {
              "name": "button",
              "description": "If `true`, a button tag will be rendered and the card will be tappable.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the card.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "download",
              "description": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "href",
              "description": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "rel",
              "description": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "routerAnimation",
              "description": "When using a router, it specifies the transition animation when navigating to\nanother page using `href`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "router-direction",
              "description": "When using a router, it specifies the transition direction when navigating to\nanother page using `href`.",
              "required": false,
              "default": "'forward'",
              "value": {
                "kind": "expression",
                "type": "\"back\" | \"forward\" | \"root\""
              }
            },
            {
              "name": "target",
              "description": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "type",
              "description": "The type of the button. Only used when an `onclick` or `button` property is present.",
              "required": false,
              "default": "'button'",
              "value": {
                "kind": "expression",
                "type": "\"button\" | \"reset\" | \"submit\""
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonCheckbox",
          "doc-url": "https://ionicframework.com/docs/api/checkbox",
          "description": "Checkboxes allow the selection of multiple options from a set of options. They appear as checked (ticked) when activated. Clicking on a checkbox will toggle the `checked` property. They can also be checked programmatically by setting the `checked` property.",
          "source": {
            "module": "@ionic/core/dist/types/components/checkbox/checkbox.d.ts",
            "symbol": "Checkbox"
          },
          "attributes": [
            {
              "name": "checked",
              "description": "If `true`, the checkbox is selected.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the checkbox.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "indeterminate",
              "description": "If `true`, the checkbox will visually appear as indeterminate.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "name",
              "description": "The name of the control, which is submitted with the form data.",
              "required": false,
              "default": "this.inputId",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "The value of the checkbox does not mean if it's checked or not, use the `checked`\nproperty for that.\n\nThe value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`,\nit's only used when the checkbox participates in a native `<form>`.",
              "required": false,
              "default": "'on'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the checkbox loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionChange",
              "description": "Emitted when the checked property has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "CheckboxChangeEventDetail"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the checkbox has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonChip",
          "doc-url": "https://ionicframework.com/docs/api/chip",
          "description": "Chips represent complex entities in small blocks, such as a contact. A chip can contain several different elements such as avatars, text, and icons.",
          "source": {
            "module": "@ionic/core/dist/types/components/chip/chip.d.ts",
            "symbol": "Chip"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the chip.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "outline",
              "description": "Display an outline style button.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonContent",
          "doc-url": "https://ionicframework.com/docs/api/content",
          "description": "The content component provides an easy to use content area with some useful methods\nto control the scrollable area. There should only be one content in a single\nview.\n\nContent, along with many other Ionic components, can be customized to modify its padding, margin, and more using the global styles provided in the [CSS Utilities](/docs/layout/css-utilities) or by individually styling it using CSS and the available [CSS Custom Properties](#css-custom-properties).",
          "source": {
            "module": "@ionic/core/dist/types/components/content/content.d.ts",
            "symbol": "Content"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "force-overscroll",
              "description": "If `true` and the content does not cause an overflow scroll, the scroll interaction will cause a bounce.\nIf the content exceeds the bounds of ionContent, nothing will change.\nNote, the does not disable the system bounce on iOS. That is an OS level setting.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "boolean | undefined"
              }
            },
            {
              "name": "fullscreen",
              "description": "If `true`, the content will scroll behind the headers\nand footers. This effect can easily be seen by setting the toolbar\nto transparent.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "scroll-events",
              "description": "Because of performance reasons, ionScroll events are disabled by default, in order to enable them\nand start listening from (ionScroll), set this property to `true`.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "scroll-x",
              "description": "If you want to enable the content scrolling in the X axis, set this property to `true`.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "scroll-y",
              "description": "If you want to disable the content scrolling in the Y axis, set this property to `false`.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Content is placed in the scrollable area if provided without a slot."
            },
            {
              "name": "fixed",
              "description": "Should be used for fixed content that should not scroll."
            }
          ],
          "events": [
            {
              "name": "ionScroll",
              "description": "Emitted while scrolling. This event is disabled by default.\nLook at the property: `scrollEvents`",
              "arguments": [
                {
                  "name": "detail",
                  "type": "ScrollDetail"
                }
              ]
            },
            {
              "name": "ionScrollEnd",
              "description": "Emitted when the scroll has ended.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "ScrollBaseDetail"
                }
              ]
            },
            {
              "name": "ionScrollStart",
              "description": "Emitted when the scroll has started.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "ScrollBaseDetail"
                }
              ]
            }
          ]
        },
        {
          "name": "IonDatetime",
          "doc-url": "https://ionicframework.com/docs/api/datetime",
          "description": "Datetimes present a picker interface from the bottom of a page, making it easy for\nusers to select dates and times. The picker displays scrollable columns that can be\nused to individually select years, months, days, hours and minute values. Datetimes\nare similar to the native `input` elements of type `datetime-local`, however, Ionic's\nDatetime component makes it easy to display the date and time in a preferred format,\nand manage the datetime values.",
          "source": {
            "module": "@ionic/core/dist/types/components/datetime/datetime.d.ts",
            "symbol": "Datetime"
          },
          "attributes": [
            {
              "name": "cancel-text",
              "description": "The text to display on the picker's cancel button.",
              "required": false,
              "default": "'Cancel'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "day-names",
              "description": "Full day of the week names. This can be used to provide\nlocale names for each day in the week. Defaults to English.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "day-short-names",
              "description": "Short abbreviated day of the week names. This can be used to provide\nlocale names for each day in the week. Defaults to English.\nDefaults to: `['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']`",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "day-values",
              "description": "Values used to create the list of selectable days. By default\nevery day is shown for the given month. However, to control exactly which days of\nthe month to display, the `dayValues` input can take a number, an array of numbers, or\na string of comma separated numbers. Note that even if the array days have an invalid\nnumber for the selected month, like `31` in February, it will correctly not show\ndays which are not valid for the selected month.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | number[] | string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the datetime.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "display-format",
              "description": "The display format of the date and time as text that shows\nwithin the item. When the `pickerFormat` input is not used, then the\n`displayFormat` is used for both display the formatted text, and determining\nthe datetime picker's columns. See the `pickerFormat` input description for\nmore info. Defaults to `MMM D, YYYY`.",
              "required": false,
              "default": "'MMM D, YYYY'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "display-timezone",
              "description": "The timezone to use for display purposes only. See\n[Date.prototype.toLocaleString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString)\nfor a list of supported timezones. If no value is provided, the\ncomponent will default to displaying times in the user's local timezone.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "done-text",
              "description": "The text to display on the picker's \"Done\" button.",
              "required": false,
              "default": "'Done'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "hour-values",
              "description": "Values used to create the list of selectable hours. By default\nthe hour values range from `0` to `23` for 24-hour, or `1` to `12` for 12-hour. However,\nto control exactly which hours to display, the `hourValues` input can take a number, an\narray of numbers, or a string of comma separated numbers.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | number[] | string | undefined"
              }
            },
            {
              "name": "max",
              "description": "The maximum datetime allowed. Value must be a date string\nfollowing the\n[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\n`1996-12-19`. The format does not have to be specific to an exact\ndatetime. For example, the maximum could just be the year, such as `1994`.\nDefaults to the end of this year.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "min",
              "description": "The minimum datetime allowed. Value must be a date string\nfollowing the\n[ISO 8601 datetime format standard](https://www.w3.org/TR/NOTE-datetime),\nsuch as `1996-12-19`. The format does not have to be specific to an exact\ndatetime. For example, the minimum could just be the year, such as `1994`.\nDefaults to the beginning of the year, 100 years ago from today.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "minute-values",
              "description": "Values used to create the list of selectable minutes. By default\nthe minutes range from `0` to `59`. However, to control exactly which minutes to display,\nthe `minuteValues` input can take a number, an array of numbers, or a string of comma\nseparated numbers. For example, if the minute selections should only be every 15 minutes,\nthen this input value would be `minuteValues=\"0,15,30,45\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | number[] | string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "month-names",
              "description": "Full names for each month name. This can be used to provide\nlocale month names. Defaults to English.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "month-short-names",
              "description": "Short abbreviated names for each month name. This can be used to provide\nlocale month names. Defaults to English.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "month-values",
              "description": "Values used to create the list of selectable months. By default\nthe month values range from `1` to `12`. However, to control exactly which months to\ndisplay, the `monthValues` input can take a number, an array of numbers, or a string of\ncomma separated numbers. For example, if only summer months should be shown, then this\ninput value would be `monthValues=\"6,7,8\"`. Note that month numbers do *not* have a\nzero-based index, meaning January's value is `1`, and December's is `12`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | number[] | string | undefined"
              }
            },
            {
              "name": "name",
              "description": "The name of the control, which is submitted with the form data.",
              "required": false,
              "default": "this.inputId",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "picker-format",
              "description": "The format of the date and time picker columns the user selects.\nA datetime input can have one or many datetime parts, each getting their\nown column which allow individual selection of that particular datetime part. For\nexample, year and month columns are two individually selectable columns which help\nchoose an exact date from the datetime picker. Each column follows the string\nparse format. Defaults to use `displayFormat`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "pickerOptions",
              "description": "Any additional options that the picker interface can accept.\nSee the [Picker API docs](../picker) for the picker options.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "undefined | { columns?: PickerColumn[] | undefined; buttons?: PickerButton[] | undefined; cssClass?: string | string[] | undefined; showBackdrop?: boolean | undefined; backdropDismiss?: boolean | undefined; animated?: boolean | undefined; mode?: \"ios\" | \"md\" | undefined; keyboardClose?: boolean | undefined; id?: string | undefined; enterAnimation?: AnimationBuilder | undefined; leaveAnimation?: AnimationBuilder | undefined; }"
              }
            },
            {
              "name": "placeholder",
              "description": "The text to display when there's no date selected yet.\nUsing lowercase to match the input attribute",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            },
            {
              "name": "readonly",
              "description": "If `true`, the datetime appears normal but is not interactive.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "value",
              "description": "The value of the datetime as a valid ISO 8601 datetime string.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            },
            {
              "name": "year-values",
              "description": "Values used to create the list of selectable years. By default\nthe year values range between the `min` and `max` datetime inputs. However, to\ncontrol exactly which years to display, the `yearValues` input can take a number, an array\nof numbers, or string of comma separated numbers. For example, to show upcoming and\nrecent leap years, then this input's value would be `yearValues=\"2024,2020,2016,2012,2008\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | number[] | string | undefined"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the datetime loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionCancel",
              "description": "Emitted when the datetime selection was cancelled.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionChange",
              "description": "Emitted when the value (selected date) has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "DatetimeChangeEventDetail"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the datetime has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonFab",
          "doc-url": "https://ionicframework.com/docs/api/fab",
          "description": "Fabs are container elements that contain one or more fab buttons. They should be placed in a fixed position that does not scroll with the content. Fab should have one main fab-button. Fabs can also contain fab-lists which contain related buttons that show when the main fab button is clicked. The same fab container can contain several [fab-list](../fab-list) elements with different side values.",
          "source": {
            "module": "@ionic/core/dist/types/components/fab/fab.d.ts",
            "symbol": "Fab"
          },
          "attributes": [
            {
              "name": "activated",
              "description": "If `true`, both the `ion-fab-button` and all `ion-fab-list` inside `ion-fab` will become active.\nThat means `ion-fab-button` will become a `close` icon and `ion-fab-list` will become visible.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "edge",
              "description": "If `true`, the fab will display on the edge of the header if\n`vertical` is `\"top\"`, and on the edge of the footer if\nit is `\"bottom\"`. Should be used with a `fixed` slot.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "horizontal",
              "description": "Where to align the fab horizontally in the viewport.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"center\" | \"end\" | \"start\" | undefined"
              }
            },
            {
              "name": "vertical",
              "description": "Where to align the fab vertically in the viewport.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"bottom\" | \"center\" | \"top\" | undefined"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonFabButton",
          "doc-url": "https://ionicframework.com/docs/api/fab-button",
          "description": "Floating Action Buttons (FABs) represent the primary action in an application. By default, they have a circular shape. When pressed, the button may open more related actions. As the name suggests, FABs generally float over the content in a fixed position. This is not achieved exclusively by using an `<ion-fab-button>FAB</ion-fab-button>`. They need to be wrapped with an `<ion-fab>` component in order to be fixed over the content.\n\nIf the FAB button is not wrapped with `<ion-fab>`, it will scroll with the content. FAB buttons have a default size, a mini size and can accept different colors:",
          "source": {
            "module": "@ionic/core/dist/types/components/fab-button/fab-button.d.ts",
            "symbol": "FabButton"
          },
          "attributes": [
            {
              "name": "activated",
              "description": "If `true`, the fab button will be show a close icon.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "close-icon",
              "description": "The icon name to use for the close icon. This will appear when the fab button\nis pressed. Only applies if it is the main button inside of a fab containing a\nfab list.",
              "required": false,
              "default": "'close'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the fab button.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "download",
              "description": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "href",
              "description": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "rel",
              "description": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "routerAnimation",
              "description": "When using a router, it specifies the transition animation when navigating to\nanother page using `href`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "router-direction",
              "description": "When using a router, it specifies the transition direction when navigating to\nanother page using `href`.",
              "required": false,
              "default": "'forward'",
              "value": {
                "kind": "expression",
                "type": "\"back\" | \"forward\" | \"root\""
              }
            },
            {
              "name": "show",
              "description": "If `true`, the fab button will show when in a fab-list.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "size",
              "description": "The size of the button. Set this to `small` in order to have a mini fab button.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"small\" | undefined"
              }
            },
            {
              "name": "target",
              "description": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "translucent",
              "description": "If `true`, the fab button will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "type",
              "description": "The type of the button.",
              "required": false,
              "default": "'button'",
              "value": {
                "kind": "expression",
                "type": "\"button\" | \"reset\" | \"submit\""
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the button loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the button has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonFabList",
          "doc-url": "https://ionicframework.com/docs/api/fab-list",
          "description": "The `ion-fab-list` element is a container for multiple fab buttons. This collection of fab buttons contains actions related to the main fab button and is flung out on click. To specify what side the buttons should appear on, set the `side` property to 'start', 'end', 'top', 'bottom'",
          "source": {
            "module": "@ionic/core/dist/types/components/fab-list/fab-list.d.ts",
            "symbol": "FabList"
          },
          "attributes": [
            {
              "name": "activated",
              "description": "If `true`, the fab list will show all fab buttons in the list.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "side",
              "description": "The side the fab list will show on relative to the main fab button.",
              "required": false,
              "default": "'bottom'",
              "value": {
                "kind": "expression",
                "type": "\"bottom\" | \"end\" | \"start\" | \"top\""
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonFooter",
          "doc-url": "https://ionicframework.com/docs/api/footer",
          "description": "Footer is a root component of a page that sits at the bottom of the page.\nFooter can be a wrapper for ion-toolbar to make sure the content area is sized correctly.",
          "source": {
            "module": "@ionic/core/dist/types/components/footer/footer.d.ts",
            "symbol": "Footer"
          },
          "attributes": [
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "translucent",
              "description": "If `true`, the footer will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).\n\nNote: In order to scroll content behind the footer, the `fullscreen`\nattribute needs to be set on the content.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonGrid",
          "doc-url": "https://ionicframework.com/docs/api/grid",
          "description": "The grid is a powerful mobile-first flexbox system for building custom layouts.\n\nIt is composed of three units — a grid, [row(s)](../row) and [column(s)](../col). Columns will expand to fill the row, and will resize to fit additional columns. It is based on a 12 column layout with different breakpoints based on the screen size. The number of columns can be customized using CSS.\n\nSee the [Responsive Grid documentation](/docs/layout/grid) for more information.",
          "source": {
            "module": "@ionic/core/dist/types/components/grid/grid.d.ts",
            "symbol": "Grid"
          },
          "attributes": [
            {
              "name": "fixed",
              "description": "If `true`, the grid will have a fixed width based on the screen size.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonHeader",
          "doc-url": "https://ionicframework.com/docs/api/header",
          "description": "Header is a parent component that holds the toolbar component.\nIt's important to note that ion-header needs to be the one of the three root elements of a page",
          "source": {
            "module": "@ionic/core/dist/types/components/header/header.d.ts",
            "symbol": "Header"
          },
          "attributes": [
            {
              "name": "collapse",
              "description": "Describes the scroll effect that will be applied to the header\n`condense` only applies in iOS mode.\n\nTypically used for [Collapsible Large Titles](https://ionicframework.com/docs/api/title#collapsible-large-titles)",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"condense\" | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "translucent",
              "description": "If `true`, the header will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).\n\nNote: In order to scroll content behind the header, the `fullscreen`\nattribute needs to be set on the content.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonImg",
          "doc-url": "https://ionicframework.com/docs/api/img",
          "description": "Img is a tag that will lazily load an image when ever the tag is in the viewport. This is extremely useful when generating a large list as images are only loaded when they're visible. The component uses [Intersection Observer](https://caniuse.com/#feat=intersectionobserver) internally, which is supported in most modern browser, but falls back to a `setTimeout` when it is not supported.",
          "source": {
            "module": "@ionic/core/dist/types/components/img/img.d.ts",
            "symbol": "Img"
          },
          "attributes": [
            {
              "name": "alt",
              "description": "This attribute defines the alternative text describing the image.\nUsers will see this text displayed if the image URL is wrong,\nthe image is not in one of the supported formats, or if the image is not yet downloaded.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "src",
              "description": "The image URL. This attribute is mandatory for the `<img>` element.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionError",
              "description": "Emitted when the img fails to load",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "onDidLoad",
              "description": "Emitted when the image has finished loading",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "onWillLoad",
              "description": "Emitted when the img src has been set",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonInfiniteScroll",
          "doc-url": "https://ionicframework.com/docs/api/infinite-scroll",
          "description": "The Infinite Scroll component calls an action to be performed when the user scrolls a specified distance from the bottom or top of the page.\n\nThe expression assigned to the `ionInfinite` event is called when the user reaches that defined distance. When this expression has finished any and all tasks, it should call the `complete()` method on the infinite scroll instance.",
          "source": {
            "module": "@ionic/core/dist/types/components/infinite-scroll/infinite-scroll.d.ts",
            "symbol": "InfiniteScroll"
          },
          "attributes": [
            {
              "name": "disabled",
              "description": "If `true`, the infinite scroll will be hidden and scroll event listeners\nwill be removed.\n\nSet this to true to disable the infinite scroll from actively\ntrying to receive new data while scrolling. This is useful\nwhen it is known that there is no more data that can be added, and\nthe infinite scroll is no longer needed.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "position",
              "description": "The position of the infinite scroll element.\nThe value can be either `top` or `bottom`.",
              "required": false,
              "default": "'bottom'",
              "value": {
                "kind": "expression",
                "type": "\"bottom\" | \"top\""
              }
            },
            {
              "name": "threshold",
              "description": "The threshold distance from the bottom\nof the content to call the `infinite` output event when scrolled.\nThe threshold value can be either a percent, or\nin pixels. For example, use the value of `10%` for the `infinite`\noutput event to get called when the user has scrolled 10%\nfrom the bottom of the page. Use the value `100px` when the\nscroll is within 100 pixels from the bottom of the page.",
              "required": false,
              "default": "'15%'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionInfinite",
              "description": "Emitted when the scroll reaches\nthe threshold distance. From within your infinite handler,\nyou must call the infinite scroll's `complete()` method when\nyour async operation has completed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonInfiniteScrollContent",
          "doc-url": "https://ionicframework.com/docs/api/infinite-scroll-content",
          "description": "The `ion-infinite-scroll-content` component is the default child used by the `ion-infinite-scroll`. It displays an infinite scroll spinner that looks best based on the platform and changes the look depending on the infinite scroll's state. The default spinner can be changed and text can be added by setting the `loadingSpinner` and `loadingText` properties.",
          "source": {
            "module": "@ionic/core/dist/types/components/infinite-scroll-content/infinite-scroll-content.d.ts",
            "symbol": "InfiniteScrollContent"
          },
          "attributes": [
            {
              "name": "loading-spinner",
              "description": "An animated SVG spinner that shows while loading.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-small\" | null | undefined"
              }
            },
            {
              "name": "loading-text",
              "description": "Optional text to display while loading.\n`loadingText` can accept either plaintext or HTML as a string.\nTo display characters normally reserved for HTML, they\nmust be escaped. For example `<Ionic>` would become\n`&lt;Ionic&gt;`\n\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "IonicSafeString | string | undefined"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonInput",
          "doc-url": "https://ionicframework.com/docs/api/input",
          "description": "The input component is a wrapper to the HTML input element with custom styling and additional functionality. It accepts most of the same properties as the HTML input, but works great on desktop devices and integrates with the keyboard on mobile devices.\n\nIt is meant for text `type` inputs only, such as `\"text\"`, `\"password\"`, `\"email\"`, `\"number\"`, `\"search\"`, `\"tel\"`, and `\"url\"`. It supports all standard text input events including keyup, keydown, keypress, and more.",
          "source": {
            "module": "@ionic/core/dist/types/components/input/input.d.ts",
            "symbol": "Input"
          },
          "attributes": [
            {
              "name": "accept",
              "description": "If the value of the type attribute is `\"file\"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "autocapitalize",
              "description": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\nAvailable options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.",
              "required": false,
              "default": "'off'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "autocomplete",
              "description": "Indicates whether the value of the control can be automatically completed by the browser.",
              "required": false,
              "default": "'off'",
              "value": {
                "kind": "expression",
                "type": "\"on\" | \"off\" | \"name\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"url\" | \"photo\""
              }
            },
            {
              "name": "autocorrect",
              "description": "Whether auto correction should be enabled when the user is entering/editing the text value.",
              "required": false,
              "default": "'off'",
              "value": {
                "kind": "expression",
                "type": "\"off\" | \"on\""
              }
            },
            {
              "name": "autofocus",
              "description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "clear-input",
              "description": "If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "clear-on-edit",
              "description": "If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "boolean | undefined"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "debounce",
              "description": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
              "required": false,
              "default": "0",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the input.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "enterkeyhint",
              "description": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined"
              }
            },
            {
              "name": "inputmode",
              "description": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined"
              }
            },
            {
              "name": "max",
              "description": "The maximum value, which must not be less than its minimum (min attribute) value.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "maxlength",
              "description": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | undefined"
              }
            },
            {
              "name": "min",
              "description": "The minimum value, which must not be greater than its maximum (max attribute) value.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "minlength",
              "description": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "multiple",
              "description": "If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `\"email\"` or `\"file\"`, otherwise it is ignored.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "boolean | undefined"
              }
            },
            {
              "name": "name",
              "description": "The name of the control, which is submitted with the form data.",
              "required": false,
              "default": "this.inputId",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "pattern",
              "description": "A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, `\"date\"`, or `\"password\"`, otherwise it is ignored. When the type attribute is `\"date\"`, `pattern` will only be used in browsers that do not support the `\"date\"` input type natively. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date for more information.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "placeholder",
              "description": "Instructional text that shows before the input has a value.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            },
            {
              "name": "readonly",
              "description": "If `true`, the user cannot modify the value.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "required",
              "description": "If `true`, the user must fill in a value before submitting a form.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "size",
              "description": "The initial size of the control. This value is in pixels unless the value of the type attribute is `\"text\"` or `\"password\"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, or `\"password\"`, otherwise it is ignored.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | undefined"
              }
            },
            {
              "name": "spellcheck",
              "description": "If `true`, the element will have its spelling and grammar checked.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "step",
              "description": "Works with the min and max attributes to limit the increments at which a value can be set.\nPossible values are: `\"any\"` or a positive floating point number.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "type",
              "description": "The type of control to display. The default type is text.",
              "required": false,
              "default": "'text'",
              "value": {
                "kind": "expression",
                "type": "\"date\" | \"datetime-local\" | \"email\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\" | \"week\""
              }
            },
            {
              "name": "value",
              "description": "The value of the input.",
              "required": false,
              "default": "''",
              "value": {
                "kind": "expression",
                "type": "null | number | string | undefined"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the input loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "FocusEvent"
                }
              ]
            },
            {
              "name": "ionChange",
              "description": "Emitted when the value has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "InputChangeEventDetail"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the input has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "FocusEvent"
                }
              ]
            },
            {
              "name": "on",
              "description": "Emitted when a keyboard input occurred.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "KeyboardEvent"
                }
              ]
            }
          ]
        },
        {
          "name": "IonItem",
          "doc-url": "https://ionicframework.com/docs/api/item",
          "description": "Items are elements that can contain text, icons, avatars, images, inputs, and any other native or custom elements. Generally they are placed in a list with other items. Items can be swiped, deleted, reordered, edited, and more.",
          "source": {
            "module": "@ionic/core/dist/types/components/item/item.d.ts",
            "symbol": "Item"
          },
          "attributes": [
            {
              "name": "button",
              "description": "If `true`, a button tag will be rendered and the item will be tappable.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "detail",
              "description": "If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode`\nis `ios` and an `href` or `button` property is present.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "boolean | undefined"
              }
            },
            {
              "name": "detail-icon",
              "description": "The icon to use when `detail` is set to `true`.",
              "required": false,
              "default": "'chevron-forward'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the item.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "download",
              "description": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "href",
              "description": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "lines",
              "description": "How the bottom border should be displayed on the item.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"full\" | \"inset\" | \"none\" | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "rel",
              "description": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "routerAnimation",
              "description": "When using a router, it specifies the transition animation when navigating to\nanother page using `href`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "router-direction",
              "description": "When using a router, it specifies the transition direction when navigating to\nanother page using `href`.",
              "required": false,
              "default": "'forward'",
              "value": {
                "kind": "expression",
                "type": "\"back\" | \"forward\" | \"root\""
              }
            },
            {
              "name": "target",
              "description": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "type",
              "description": "The type of the button. Only used when an `onclick` or `button` property is present.",
              "required": false,
              "default": "'button'",
              "value": {
                "kind": "expression",
                "type": "\"button\" | \"reset\" | \"submit\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Content is placed between the named slots if provided without a slot."
            },
            {
              "name": "end",
              "description": "Content is placed to the right of the item text in LTR, and to the left in RTL."
            },
            {
              "name": "start",
              "description": "Content is placed to the left of the item text in LTR, and to the right in RTL."
            }
          ],
          "events": []
        },
        {
          "name": "IonItemDivider",
          "doc-url": "https://ionicframework.com/docs/api/item-divider",
          "description": "Item Dividers are block elements that can be used to separate items in a list. They are similar to list headers, but instead of being placed at the top of a list, they should go in between groups of items.",
          "source": {
            "module": "@ionic/core/dist/types/components/item-divider/item-divider.d.ts",
            "symbol": "ItemDivider"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "sticky",
              "description": "When it's set to `true`, the item-divider will stay visible when it reaches the top\nof the viewport until the next `ion-item-divider` replaces it.\n\nThis feature relies in `position:sticky`:\nhttps://caniuse.com/#feat=css-sticky",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Content is placed between the named slots if provided without a slot."
            },
            {
              "name": "end",
              "description": "Content is placed to the right of the divider text in LTR, and to the left in RTL."
            },
            {
              "name": "start",
              "description": "Content is placed to the left of the divider text in LTR, and to the right in RTL."
            }
          ],
          "events": []
        },
        {
          "name": "IonItemGroup",
          "doc-url": "https://ionicframework.com/docs/api/item-group",
          "description": "Item groups are containers that organize similar items together. They can contain item dividers to divide the items into multiple sections. They can also be used to group sliding items.",
          "source": {
            "module": "@ionic/core/dist/types/components/item-group/item-group.d.ts",
            "symbol": "ItemGroup"
          },
          "attributes": [],
          "slots": [],
          "events": []
        },
        {
          "name": "IonItemSliding",
          "doc-url": "https://ionicframework.com/docs/api/item-sliding",
          "description": "A sliding item contains an item that can be dragged to reveal buttons. It requires an [item](../item) component as a child. All options to reveal should be placed in the [item options](../item-options) element.",
          "source": {
            "module": "@ionic/core/dist/types/components/item-sliding/item-sliding.d.ts",
            "symbol": "ItemSliding"
          },
          "attributes": [
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the sliding item.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionDrag",
              "description": "Emitted when the sliding position changes.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "any"
                }
              ]
            }
          ]
        },
        {
          "name": "IonLabel",
          "doc-url": "https://ionicframework.com/docs/api/label",
          "description": "Label is a wrapper element that can be used in combination with `ion-item`, `ion-input`, `ion-toggle`, and more. The position of the label inside of an item can be inline, fixed, stacked, or floating.",
          "source": {
            "module": "@ionic/core/dist/types/components/label/label.d.ts",
            "symbol": "Label"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "position",
              "description": "The position determines where and how the label behaves inside an item.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"fixed\" | \"floating\" | \"stacked\" | undefined"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonList",
          "doc-url": "https://ionicframework.com/docs/api/list",
          "description": "Lists are made up of multiple rows of items which can contain text, buttons, toggles,\nicons, thumbnails, and much more. Lists generally contain items with similar data content, such as images and text.\n\nLists support several interactions including swiping items to reveal options, dragging to reorder items within the list, and deleting items.",
          "source": {
            "module": "@ionic/core/dist/types/components/list/list.d.ts",
            "symbol": "List"
          },
          "attributes": [
            {
              "name": "inset",
              "description": "If `true`, the list will have margin around it and rounded corners.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "lines",
              "description": "How the bottom border should be displayed on all items.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"full\" | \"inset\" | \"none\" | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonListHeader",
          "doc-url": "https://ionicframework.com/docs/api/list-header",
          "description": "ListHeader a header component for a list.\nUnlike ItemDivider, ListHeaders are styled to be stand-out from the rest of the list items.",
          "source": {
            "module": "@ionic/core/dist/types/components/list-header/list-header.d.ts",
            "symbol": "ListHeader"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "lines",
              "description": "How the bottom border should be displayed on the list header.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"full\" | \"inset\" | \"none\" | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonLoading",
          "doc-url": "https://ionicframework.com/docs/api/loading",
          "description": "An overlay that can be used to indicate activity while blocking user interaction. The loading indicator appears on top of the app's content, and can be dismissed by the app to resume user interaction with the app. It includes an optional backdrop, which can be disabled by setting `showBackdrop: false` upon creation.",
          "source": {
            "module": "@ionic/core/dist/types/components/loading/loading.d.ts",
            "symbol": "Loading"
          },
          "attributes": [
            {
              "name": "animated",
              "description": "If `true`, the loading indicator will animate.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "backdrop-dismiss",
              "description": "If `true`, the loading indicator will be dismissed when the backdrop is clicked.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "css-class",
              "description": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "duration",
              "description": "Number of milliseconds to wait before dismissing the loading indicator.",
              "required": false,
              "default": "0",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "enterAnimation",
              "description": "Animation to use when the loading indicator is presented.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "keyboard-close",
              "description": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "leaveAnimation",
              "description": "Animation to use when the loading indicator is dismissed.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "message",
              "description": "Optional text content to display in the loading indicator.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "IonicSafeString | string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "show-backdrop",
              "description": "If `true`, a backdrop will be displayed behind the loading indicator.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "spinner",
              "description": "The name of the spinner to display.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-small\" | null | undefined"
              }
            },
            {
              "name": "translucent",
              "description": "If `true`, the loading indicator will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "onDidDismiss",
              "description": "Emitted after the loading has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onDidPresent",
              "description": "Emitted after the loading has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "onWillDismiss",
              "description": "Emitted before the loading has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onWillPresent",
              "description": "Emitted before the loading has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonMenu",
          "doc-url": "https://ionicframework.com/docs/api/menu",
          "description": "The Menu component is a navigation drawer that slides in from the side of the current view.\nBy default, it slides in from the left, but the side can be overridden.\nThe menu will be displayed differently based on the mode, however the display type can be changed to any of the available menu types.\nThe menu element should be a sibling to the root content element.\nThere can be any number of menus attached to the content.\nThese can be controlled from the templates, or programmatically using the MenuController.",
          "source": {
            "module": "@ionic/core/dist/types/components/menu/menu.d.ts",
            "symbol": "Menu"
          },
          "attributes": [
            {
              "name": "content-id",
              "description": "The content's id the menu should use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the menu is disabled.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "max-edge-start",
              "description": "The edge threshold for dragging the menu open.\nIf a drag/swipe happens over this value, the menu is not triggered.",
              "required": false,
              "default": "50",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "menu-id",
              "description": "An id for the menu.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "side",
              "description": "Which side of the view the menu should be placed.",
              "required": false,
              "default": "'start'",
              "value": {
                "kind": "expression",
                "type": "\"end\" | \"start\""
              }
            },
            {
              "name": "swipe-gesture",
              "description": "If `true`, swiping the menu is enabled.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "type",
              "description": "The display type of the menu.\nAvailable options: `\"overlay\"`, `\"reveal\"`, `\"push\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionDidClose",
              "description": "Emitted when the menu is closed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionDidOpen",
              "description": "Emitted when the menu is open.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionWillClose",
              "description": "Emitted when the menu is about to be closed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionWillOpen",
              "description": "Emitted when the menu is about to be opened.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonModal",
          "doc-url": "https://ionicframework.com/docs/api/modal",
          "description": "A Modal is a dialog that appears on top of the app's content, and must be dismissed by the app before interaction can resume. It is useful as a select component when there are a lot of options to choose from, or when filtering items in a list, as well as many other use cases.",
          "source": {
            "module": "@ionic/core/dist/types/components/modal/modal.d.ts",
            "symbol": "Modal"
          },
          "attributes": [
            {
              "name": "animated",
              "description": "If `true`, the modal will animate.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "backdrop-dismiss",
              "description": "If `true`, the modal will be dismissed when the backdrop is clicked.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "component",
              "description": "The component to display inside of the modal.",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "Function | HTMLElement | null | string"
              }
            },
            {
              "name": "componentProps",
              "description": "The data to pass to the modal component.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "undefined | { [key: string]: any; }"
              }
            },
            {
              "name": "css-class",
              "description": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "enterAnimation",
              "description": "Animation to use when the modal is presented.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "keyboard-close",
              "description": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "leaveAnimation",
              "description": "Animation to use when the modal is dismissed.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "presentingElement",
              "description": "The element that presented the modal. This is used for card presentation effects\nand for stacking multiple modals on top of each other. Only applies in iOS mode.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "HTMLElement | undefined"
              }
            },
            {
              "name": "show-backdrop",
              "description": "If `true`, a backdrop will be displayed behind the modal.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "swipe-to-close",
              "description": "If `true`, the modal can be swiped to dismiss. Only applies in iOS mode.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "onDidDismiss",
              "description": "Emitted after the modal has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onDidPresent",
              "description": "Emitted after the modal has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "onWillDismiss",
              "description": "Emitted before the modal has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onWillPresent",
              "description": "Emitted before the modal has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonNote",
          "doc-url": "https://ionicframework.com/docs/api/note",
          "description": "Notes are text elements generally used as subtitles that provide more information. Notes are styled to appear grey by default. Notes can be used in an item as metadata text.",
          "source": {
            "module": "@ionic/core/dist/types/components/note/note.d.ts",
            "symbol": "Note"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonPopover",
          "doc-url": "https://ionicframework.com/docs/api/popover",
          "description": "A Popover is a dialog that appears on top of the current page. It can be used for anything, but generally it is used for overflow actions that don't fit in the navigation bar.",
          "source": {
            "module": "@ionic/core/dist/types/components/popover/popover.d.ts",
            "symbol": "Popover"
          },
          "attributes": [
            {
              "name": "animated",
              "description": "If `true`, the popover will animate.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "backdrop-dismiss",
              "description": "If `true`, the popover will be dismissed when the backdrop is clicked.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "component",
              "description": "The component to display inside of the popover.",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "Function | HTMLElement | null | string"
              }
            },
            {
              "name": "componentProps",
              "description": "The data to pass to the popover component.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "undefined | { [key: string]: any; }"
              }
            },
            {
              "name": "css-class",
              "description": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "enterAnimation",
              "description": "Animation to use when the popover is presented.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "event",
              "description": "The event to pass to the popover animation.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "any"
              }
            },
            {
              "name": "keyboard-close",
              "description": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "leaveAnimation",
              "description": "Animation to use when the popover is dismissed.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "show-backdrop",
              "description": "If `true`, a backdrop will be displayed behind the popover.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "translucent",
              "description": "If `true`, the popover will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "onDidDismiss",
              "description": "Emitted after the popover has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onDidPresent",
              "description": "Emitted after the popover has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "onWillDismiss",
              "description": "Emitted before the popover has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onWillPresent",
              "description": "Emitted before the popover has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonProgressBar",
          "doc-url": "https://ionicframework.com/docs/api/progress-bar",
          "description": "ion-progress-bar is a horizontal progress bar to visualize the progression of an operation and activity. You can choose between two types: `determinate` and `indeterminate`.",
          "source": {
            "module": "@ionic/core/dist/types/components/progress-bar/progress-bar.d.ts",
            "symbol": "ProgressBar"
          },
          "attributes": [
            {
              "name": "buffer",
              "description": "If the buffer and value are smaller than 1, the buffer circles will show.\nThe buffer should be between [0, 1].",
              "required": false,
              "default": "1",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "reversed",
              "description": "If true, reverse the progress bar direction.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "type",
              "description": "The state of the progress bar, based on if the time the process takes is known or not.\nDefault options are: `\"determinate\"` (no animation), `\"indeterminate\"` (animate from left to right).",
              "required": false,
              "default": "'determinate'",
              "value": {
                "kind": "expression",
                "type": "\"determinate\" | \"indeterminate\""
              }
            },
            {
              "name": "value",
              "description": "The value determines how much of the active bar should display when the\n`type` is `\"determinate\"`.\nThe value should be between [0, 1].",
              "required": false,
              "default": "0",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonRadio",
          "doc-url": "https://ionicframework.com/docs/api/radio",
          "description": "Radios should be used inside of an [`ion-radio-group`](../radio-group). Pressing on a radio will check it. They can also be checked programmatically by setting the value property of the parent `ion-radio-group` to the value of the radio.\n\nWhen radios are inside of a radio group, only one radio in the group will be checked at any time. Pressing a radio will check it and uncheck the previously selected radio, if there is one. If a radio is not in a group with another radio, then both radios will have the ability to be checked at the same time.",
          "source": {
            "module": "@ionic/core/dist/types/components/radio/radio.d.ts",
            "symbol": "Radio"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the radio.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "name",
              "description": "The name of the control, which is submitted with the form data.",
              "required": false,
              "default": "this.inputId",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "the value of the radio.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "any"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the radio button loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the radio button has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonRadioGroup",
          "doc-url": "https://ionicframework.com/docs/api/radio-group",
          "description": "A radio group is a group of [radio buttons](../radio). It allows\na user to select at most one radio button from a set. Checking one radio\nbutton that belongs to a radio group unchecks any previous checked\nradio button within the same group.",
          "source": {
            "module": "@ionic/core/dist/types/components/radio-group/radio-group.d.ts",
            "symbol": "RadioGroup"
          },
          "attributes": [
            {
              "name": "allow-empty-selection",
              "description": "If `true`, the radios can be deselected.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "name",
              "description": "The name of the control, which is submitted with the form data.",
              "required": false,
              "default": "this.inputId",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "the value of the radio group.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "any"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionChange",
              "description": "Emitted when the value has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "RadioGroupChangeEventDetail"
                }
              ]
            }
          ]
        },
        {
          "name": "IonRange",
          "doc-url": "https://ionicframework.com/docs/api/range",
          "description": "The Range slider lets users select from a range of values by moving\nthe slider knob. It can accept dual knobs, but by default one knob\ncontrols the value of the range.",
          "source": {
            "module": "@ionic/core/dist/types/components/range/range.d.ts",
            "symbol": "Range"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "debounce",
              "description": "How long, in milliseconds, to wait to trigger the\n`ionChange` event after each change in the range value.\nThis also impacts form bindings such as `ngModel` or `v-model`.",
              "required": false,
              "default": "0",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the range.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "dual-knobs",
              "description": "Show two knobs.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "max",
              "description": "Maximum integer value of the range.",
              "required": false,
              "default": "100",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "min",
              "description": "Minimum integer value of the range.",
              "required": false,
              "default": "0",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "name",
              "description": "The name of the control, which is submitted with the form data.",
              "required": false,
              "default": "''",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "pin",
              "description": "If `true`, a pin with integer value is shown when the knob\nis pressed.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "snaps",
              "description": "If `true`, the knob snaps to tick marks evenly spaced based\non the step property value.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "step",
              "description": "Specifies the value granularity.",
              "required": false,
              "default": "1",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "ticks",
              "description": "If `true`, tick marks are displayed based on the step value.\nOnly applies when `snaps` is `true`.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "value",
              "description": "the value of the range.",
              "required": false,
              "default": "0",
              "value": {
                "kind": "expression",
                "type": "number | { lower: number; upper: number; }"
              }
            }
          ],
          "slots": [
            {
              "name": "end",
              "description": "Content is placed to the right of the range slider in LTR, and to the left in RTL."
            },
            {
              "name": "start",
              "description": "Content is placed to the left of the range slider in LTR, and to the right in RTL."
            }
          ],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the range loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionChange",
              "description": "Emitted when the value property has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "RangeChangeEventDetail"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the range has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonRefresher",
          "doc-url": "https://ionicframework.com/docs/api/refresher",
          "description": "The refresher provides pull-to-refresh functionality on a content component.\nThe pull-to-refresh pattern lets a user pull down on a list of data using touch\nin order to retrieve more data.\n\nData should be modified during the refresher's output events. Once the async\noperation has completed and the refreshing should end, call `complete()` on the\nrefresher.",
          "source": {
            "module": "@ionic/core/dist/types/components/refresher/refresher.d.ts",
            "symbol": "Refresher"
          },
          "attributes": [
            {
              "name": "close-duration",
              "description": "Time it takes to close the refresher.\nDoes not apply when the refresher content uses a spinner,\nenabling the native refresher.",
              "required": false,
              "default": "'280ms'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the refresher will be hidden.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "pull-factor",
              "description": "How much to multiply the pull speed by. To slow the pull animation down,\npass a number less than `1`. To speed up the pull, pass a number greater\nthan `1`. The default value is `1` which is equal to the speed of the cursor.\nIf a negative value is passed in, the factor will be `1` instead.\n\nFor example: If the value passed is `1.2` and the content is dragged by\n`10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n(an increase of 20 percent). If the value passed is `0.8`, the dragged amount\nwill be `8` pixels, less than the amount the cursor has moved.\n\nDoes not apply when the refresher content uses a spinner,\nenabling the native refresher.",
              "required": false,
              "default": "1",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "pull-max",
              "description": "The maximum distance of the pull until the refresher\nwill automatically go into the `refreshing` state.\nDefaults to the result of `pullMin + 60`.\nDoes not apply when  the refresher content uses a spinner,\nenabling the native refresher.",
              "required": false,
              "default": "this.pullMin + 60",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "pull-min",
              "description": "The minimum distance the user must pull down until the\nrefresher will go into the `refreshing` state.\nDoes not apply when the refresher content uses a spinner,\nenabling the native refresher.",
              "required": false,
              "default": "60",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "snapback-duration",
              "description": "Time it takes the refresher to to snap back to the `refreshing` state.\nDoes not apply when the refresher content uses a spinner,\nenabling the native refresher.",
              "required": false,
              "default": "'280ms'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionPull",
              "description": "Emitted while the user is pulling down the content and exposing the refresher.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionRefresh",
              "description": "Emitted when the user lets go of the content and has pulled down\nfurther than the `pullMin` or pulls the content down and exceeds the pullMax.\nUpdates the refresher state to `refreshing`. The `complete()` method should be\ncalled when the async operation has completed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "RefresherEventDetail"
                }
              ]
            },
            {
              "name": "ionStart",
              "description": "Emitted when the user begins to start pulling down.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonReorder",
          "doc-url": "https://ionicframework.com/docs/api/reorder",
          "description": "Reorder is a component that allows an item in a group of items to be dragged to change its order within that group. It must be used within an `ion-reorder-group` to provide a visual drag and drop interface.\n\n`ion-reorder` is the anchor used to drag and drop the items inside of the `ion-reorder-group`. See the [Reorder Group](../reorder-group) for more information on how to complete the reorder operation.",
          "source": {
            "module": "@ionic/core/dist/types/components/reorder/reorder.d.ts",
            "symbol": "Reorder"
          },
          "attributes": [],
          "slots": [],
          "events": []
        },
        {
          "name": "IonReorderGroup",
          "doc-url": "https://ionicframework.com/docs/api/reorder-group",
          "description": "The reorder group is a wrapper component for items using the `ion-reorder` component. See the [Reorder documentation](../reorder/) for further information about the anchor component that is used to drag items within the `ion-reorder-group`.\n\nOnce the user drags an item and drops it in a new position, the `ionItemReorder` event is dispatched. A handler for it should be implemented that calls the `complete()` method.\n\nThe `detail` property of the `ionItemReorder` event includes all of the relevant information about the reorder operation, including the `from` and `to` indexes. In the context of reordering, an item moves `from` an index `to` a new index.",
          "source": {
            "module": "@ionic/core/dist/types/components/reorder-group/reorder-group.d.ts",
            "symbol": "ReorderGroup"
          },
          "attributes": [
            {
              "name": "disabled",
              "description": "If `true`, the reorder will be hidden.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionItemReorder",
              "description": "Event that needs to be listened to in order to complete the reorder action.\nOnce the event has been emitted, the `complete()` method then needs\nto be called in order to finalize the reorder action.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "ItemReorderEventDetail"
                }
              ]
            }
          ]
        },
        {
          "name": "IonRippleEffect",
          "doc-url": "https://ionicframework.com/docs/api/ripple-effect",
          "description": "The ripple effect component adds the [Material Design ink ripple interaction effect](https://material.io/develop/web/components/ripples/). This component can only be used inside of an `<ion-app>` and can be added to any component.\n\nIt's important to note that the parent should have [relative positioning](https://developer.mozilla.org/en-US/docs/Web/CSS/position) because the ripple effect is absolutely positioned and will cover the closest parent with relative positioning. The parent element should also be given the `ion-activatable` class, which tells the ripple effect that the element is clickable.\n\nThe default type, `\"bounded\"`, will expand the ripple effect from the click position outwards. To add a ripple effect that always starts in the center of the element and expands in a circle, add an `\"unbounded\"` type. It's recommended to add `overflow: hidden` to the parent element to avoid the ripple overflowing its container, especially with an unbounded ripple.",
          "source": {
            "module": "@ionic/core/dist/types/components/ripple-effect/ripple-effect.d.ts",
            "symbol": "RippleEffect"
          },
          "attributes": [
            {
              "name": "type",
              "description": "Sets the type of ripple-effect:\n\n- `bounded`: the ripple effect expands from the user's click position\n- `unbounded`: the ripple effect expands from the center of the button and overflows the container.\n\nNOTE: Surfaces for bounded ripples should have the overflow property set to hidden,\nwhile surfaces for unbounded ripples should have it set to visible.",
              "required": false,
              "default": "'bounded'",
              "value": {
                "kind": "expression",
                "type": "\"bounded\" | \"unbounded\""
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonRoute",
          "doc-url": "https://ionicframework.com/docs/api/route",
          "description": "The route component takes a component and renders it when the Browser URL matches the url property.\n\n> Note: this component should only be used with vanilla and Stencil JavaScript projects. For Angular projects, use [`ion-router-outlet`](../router-outlet) and the Angular router.",
          "source": {
            "module": "@ionic/core/dist/types/components/route/route.d.ts",
            "symbol": "Route"
          },
          "attributes": [
            {
              "name": "beforeEnter",
              "description": "A navigation hook that is fired when the route tries to enter.\nReturning `true` allows the navigation to proceed, while returning\n`false` causes it to be cancelled. Returning a `NavigationHookOptions`\nobject causes the router to redirect to the path specified.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "(() => boolean | NavigationHookOptions | Promise<NavigationHookResult>) | undefined"
              }
            },
            {
              "name": "beforeLeave",
              "description": "A navigation hook that is fired when the route tries to leave.\nReturning `true` allows the navigation to proceed, while returning\n`false` causes it to be cancelled. Returning a `NavigationHookOptions`\nobject causes the router to redirect to the path specified.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "(() => boolean | NavigationHookOptions | Promise<NavigationHookResult>) | undefined"
              }
            },
            {
              "name": "component",
              "description": "Name of the component to load/select in the navigation outlet (`ion-tabs`, `ion-nav`)\nwhen the route matches.\n\nThe value of this property is not always the tagname of the component to load,\nin `ion-tabs` it actually refers to the name of the `ion-tab` to select.",
              "required": true,
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "componentProps",
              "description": "A key value `{ 'red': true, 'blue': 'white'}` containing props that should be passed\nto the defined component when rendered.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "undefined | { [key: string]: any; }"
              }
            },
            {
              "name": "url",
              "description": "Relative path that needs to match in order for this route to apply.\n\nAccepts paths similar to expressjs so that you can define parameters\nin the url /foo/:bar where bar would be available in incoming props.",
              "required": false,
              "default": "''",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "onDataChanged",
              "description": "Used internally by `ion-router` to know when this route did change.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "any"
                }
              ]
            }
          ]
        },
        {
          "name": "IonSearchbar",
          "doc-url": "https://ionicframework.com/docs/api/searchbar",
          "description": "Searchbars represent a text field that can be used to search through a collection. They can be displayed inside of a toolbar or the main content.\n\nA Searchbar should be used instead of an input to search lists. A clear button is displayed upon entering input in the searchbar's text field. Clicking on the clear button will erase the text field and the input will remain focused. A cancel button can be enabled which will clear the input and lose the focus upon click.",
          "source": {
            "module": "@ionic/core/dist/types/components/searchbar/searchbar.d.ts",
            "symbol": "Searchbar"
          },
          "attributes": [
            {
              "name": "animated",
              "description": "If `true`, enable searchbar animation.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "autocomplete",
              "description": "Set the input's autocomplete property.",
              "required": false,
              "default": "'off'",
              "value": {
                "kind": "expression",
                "type": "\"on\" | \"off\" | \"name\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"new-password\" | \"current-password\" | \"one-time-code\" | \"organization-title\" | \"organization\" | \"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level4\" | \"address-level3\" | \"address-level2\" | \"address-level1\" | \"country\" | \"country-name\" | \"postal-code\" | \"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\" | \"transaction-currency\" | \"transaction-amount\" | \"language\" | \"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\" | \"sex\" | \"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\" | \"impp\" | \"url\" | \"photo\""
              }
            },
            {
              "name": "autocorrect",
              "description": "Set the input's autocorrect property.",
              "required": false,
              "default": "'off'",
              "value": {
                "kind": "expression",
                "type": "\"off\" | \"on\""
              }
            },
            {
              "name": "cancel-button-icon",
              "description": "Set the cancel button icon. Only applies to `md` mode.\nDefaults to `\"arrow-back-sharp\"`.",
              "required": false,
              "default": "config.get('backButtonIcon', 'arrow-back-sharp') as string",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "cancel-button-text",
              "description": "Set the the cancel button text. Only applies to `ios` mode.",
              "required": false,
              "default": "'Cancel'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "clear-icon",
              "description": "Set the clear icon. Defaults to `\"close-circle\"` for `ios` and `\"close-sharp\"` for `md`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "debounce",
              "description": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
              "required": false,
              "default": "250",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the input.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "enterkeyhint",
              "description": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined"
              }
            },
            {
              "name": "inputmode",
              "description": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "placeholder",
              "description": "Set the input's placeholder.\n`placeholder` can accept either plaintext or HTML as a string.\nTo display characters normally reserved for HTML, they\nmust be escaped. For example `<Ionic>` would become\n`&lt;Ionic&gt;`\n\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)",
              "required": false,
              "default": "'Search'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "search-icon",
              "description": "The icon to use as the search icon. Defaults to `\"search-outline\"` in\n`ios` mode and `\"search-sharp\"` in `md` mode.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "show-cancel-button",
              "description": "Sets the behavior for the cancel button. Defaults to `\"never\"`.\nSetting to `\"focus\"` shows the cancel button on focus.\nSetting to `\"never\"` hides the cancel button.\nSetting to `\"always\"` shows the cancel button regardless\nof focus state.",
              "required": false,
              "default": "'never'",
              "value": {
                "kind": "expression",
                "type": "\"always\" | \"focus\" | \"never\""
              }
            },
            {
              "name": "spellcheck",
              "description": "If `true`, enable spellcheck on the input.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "type",
              "description": "Set the type of the input.",
              "required": false,
              "default": "'search'",
              "value": {
                "kind": "expression",
                "type": "\"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\""
              }
            },
            {
              "name": "value",
              "description": "the value of the searchbar.",
              "required": false,
              "default": "''",
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the input loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionCancel",
              "description": "Emitted when the cancel button is clicked.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionChange",
              "description": "Emitted when the value has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "SearchbarChangeEventDetail"
                }
              ]
            },
            {
              "name": "ionClear",
              "description": "Emitted when the clear input button is clicked.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the input has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionInput",
              "description": "Emitted when a keyboard input occurred.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "KeyboardEvent"
                }
              ]
            }
          ]
        },
        {
          "name": "IonSegment",
          "doc-url": "https://ionicframework.com/docs/api/segment",
          "description": "Segments display a group of related buttons, sometimes known as segmented controls, in a horizontal row. They can be displayed inside of a toolbar or the main content.\n\nTheir functionality is similar to tabs, where selecting one will deselect all others. Segments are useful for toggling between different views inside of the content. Tabs should be used instead of a segment when clicking on a control should navigate between pages.",
          "source": {
            "module": "@ionic/core/dist/types/components/segment/segment.d.ts",
            "symbol": "Segment"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the segment.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "scrollable",
              "description": "If `true`, the segment buttons will overflow and the user can swipe to see them.\nIn addition, this will disable the gesture to drag the indicator between the buttons\nin order to swipe to see hidden buttons.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "swipe-gesture",
              "description": "If `true`, users will be able to swipe between segment buttons to activate them.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "value",
              "description": "the value of the segment.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionChange",
              "description": "Emitted when the value property has changed and any\ndragging pointer has been released from `ion-segment`.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "SegmentChangeEventDetail"
                }
              ]
            }
          ]
        },
        {
          "name": "IonSegmentButton",
          "doc-url": "https://ionicframework.com/docs/api/segment-button",
          "description": "Segment buttons are groups of related buttons inside of a [Segment](../segment). They are displayed in a horizontal row. A segment button can be checked by default by setting the `value` of the segment to the `value` of the segment button. Only one segment button can be selected at a time.",
          "source": {
            "module": "@ionic/core/dist/types/components/segment-button/segment-button.d.ts",
            "symbol": "SegmentButton"
          },
          "attributes": [
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the segment button.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "layout",
              "description": "Set the layout of the text and icon in the segment.",
              "required": false,
              "default": "'icon-top'",
              "value": {
                "kind": "expression",
                "type": "\"icon-bottom\" | \"icon-end\" | \"icon-hide\" | \"icon-start\" | \"icon-top\" | \"label-hide\" | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "type",
              "description": "The type of the button.",
              "required": false,
              "default": "'button'",
              "value": {
                "kind": "expression",
                "type": "\"button\" | \"reset\" | \"submit\""
              }
            },
            {
              "name": "value",
              "description": "The value of the segment button.",
              "required": false,
              "default": "'ion-sb-' + (ids++)",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonSelect",
          "doc-url": "https://ionicframework.com/docs/api/select",
          "description": "Selects are form controls to select an option, or options, from a set of options, similar to a native `<select>` element. When a user taps the select, a dialog appears with all of the options in a large, easy to select list.\n\nA select should be used with child `<ion-select-option>` elements. If the child option is not given a `value` attribute then its text will be used as the value.\n\nIf `value` is set on the `<ion-select>`, the selected option will be chosen based on that value.",
          "source": {
            "module": "@ionic/core/dist/types/components/select/select.d.ts",
            "symbol": "Select"
          },
          "attributes": [
            {
              "name": "cancel-text",
              "description": "The text to display on the cancel button.",
              "required": false,
              "default": "'Cancel'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "compare-with",
              "description": "A property name or function used to compare object values",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((currentValue: any, compareValue: any) => boolean) | null | string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the select.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "interface",
              "description": "The interface the select should use: `action-sheet`, `popover` or `alert`.",
              "required": false,
              "default": "'alert'",
              "value": {
                "kind": "expression",
                "type": "\"action-sheet\" | \"alert\" | \"popover\""
              }
            },
            {
              "name": "interface-options",
              "description": "Any additional options that the `alert`, `action-sheet` or `popover` interface\ncan take. See the [ion-alert docs](../alert), the\n[ion-action-sheet docs](../action-sheet) and the\n[ion-popover docs](../popover) for the\ncreate options for each interface.\n\nNote: `interfaceOptions` will not override `inputs` or `buttons` with the `alert` interface.",
              "required": false,
              "default": "{}",
              "value": {
                "kind": "expression",
                "type": "any"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "multiple",
              "description": "If `true`, the select can accept multiple values.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "name",
              "description": "The name of the control, which is submitted with the form data.",
              "required": false,
              "default": "this.inputId",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "ok-text",
              "description": "The text to display on the ok button.",
              "required": false,
              "default": "'OK'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "placeholder",
              "description": "The text to display when the select is empty.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            },
            {
              "name": "selected-text",
              "description": "The text to display instead of the selected option's value.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            },
            {
              "name": "value",
              "description": "the value of the select.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "any"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the select loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionCancel",
              "description": "Emitted when the selection is cancelled.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionChange",
              "description": "Emitted when the value has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "SelectChangeEventDetail<any>"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the select has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonSelectOption",
          "doc-url": "https://ionicframework.com/docs/api/select-option",
          "description": "Select Options are components that are child elements of a Select. Each option defined is passed and displayed in the Select dialog. For more information, see the [Select docs](../select).",
          "source": {
            "module": "@ionic/core/dist/types/components/select-option/select-option.d.ts",
            "symbol": "SelectOption"
          },
          "attributes": [
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the select option. This property does not apply when `interface=\"action-sheet\"` as `ion-action-sheet` does not allow for disabled buttons.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "value",
              "description": "The text value of the option.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "any"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonSkeletonText",
          "doc-url": "https://ionicframework.com/docs/api/skeleton-text",
          "description": "Skeleton Text is a component for rendering placeholder content. The element will render a gray block at the specified width.",
          "source": {
            "module": "@ionic/core/dist/types/components/skeleton-text/skeleton-text.d.ts",
            "symbol": "SkeletonText"
          },
          "attributes": [
            {
              "name": "animated",
              "description": "If `true`, the skeleton text will animate.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonSlides",
          "doc-url": "https://ionicframework.com/docs/api/slides",
          "description": "The Slides component is a multi-section container. Each section can be swiped\nor dragged between. It contains any number of [Slide](../slide) components.\n\n\nAdopted from Swiper.js:\nThe most modern mobile touch slider and framework with hardware accelerated transitions.\n\nhttp://www.idangero.us/swiper/\n\nCopyright 2016, Vladimir Kharlampidi\nThe iDangero.us\nhttp://www.idangero.us/\n\nLicensed under MIT",
          "source": {
            "module": "@ionic/core/dist/types/components/slides/slides.d.ts",
            "symbol": "Slides"
          },
          "attributes": [
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "options",
              "description": "Options to pass to the swiper instance.\nSee http://idangero.us/swiper/api/ for valid options",
              "required": false,
              "default": "{}",
              "value": {
                "kind": "expression",
                "type": "any"
              }
            },
            {
              "name": "pager",
              "description": "If `true`, show the pagination.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "scrollbar",
              "description": "If `true`, show the scrollbar.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionSlideDidChange",
              "description": "Emitted after the active slide has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideDoubleTap",
              "description": "Emitted when the user double taps on the slide's container.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideDrag",
              "description": "Emitted when the slider is actively being moved.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideNextEnd",
              "description": "Emitted when the next slide has ended.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideNextStart",
              "description": "Emitted when the next slide has started.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlidePrevEnd",
              "description": "Emitted when the previous slide has ended.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlidePrevStart",
              "description": "Emitted when the previous slide has started.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideReachEnd",
              "description": "Emitted when the slider is at the last slide.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideReachStart",
              "description": "Emitted when the slider is at its initial position.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "onDidLoad",
              "description": "Emitted after Swiper initialization",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideTap",
              "description": "Emitted when the user taps/clicks on the slide's container.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideTouchEnd",
              "description": "Emitted when the user releases the touch.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideTouchStart",
              "description": "Emitted when the user first touches the slider.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideTransitionEnd",
              "description": "Emitted when the slide transition has ended.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideTransitionStart",
              "description": "Emitted when the slide transition has started.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionSlideWillChange",
              "description": "Emitted before the active slide has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonSpinner",
          "doc-url": "https://ionicframework.com/docs/api/spinner",
          "description": "The Spinner component provides a variety of animated SVG spinners. Spinners are visual indicators that the app is loading content or performing another process that the user needs to wait on.\n\nThe default spinner to use is based on the platform. The default spinner for `ios` is `\"lines\"`, and the default for `android` is `\"crescent\"`. If the platform is not `ios` or `android`, the spinner will default to `crescent`. If the `name` property is set, then that spinner will be used instead of the platform specific spinner.",
          "source": {
            "module": "@ionic/core/dist/types/components/spinner/spinner.d.ts",
            "symbol": "Spinner"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "duration",
              "description": "Duration of the spinner animation in milliseconds. The default varies based on the spinner.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | undefined"
              }
            },
            {
              "name": "name",
              "description": "The name of the SVG spinner to use. If a name is not provided, the platform's default\nspinner will be used.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"bubbles\" | \"circles\" | \"circular\" | \"crescent\" | \"dots\" | \"lines\" | \"lines-small\" | undefined"
              }
            },
            {
              "name": "paused",
              "description": "If `true`, the spinner's animation will be paused.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonSplitPane",
          "doc-url": "https://ionicframework.com/docs/api/split-pane",
          "description": "A split pane is useful when creating multi-view layouts. It allows UI elements, like menus, to be\ndisplayed as the viewport width increases.\n\nIf the device's screen width is below a certain size, the split pane will collapse and the menu will be hidden. This is ideal for creating an app that will be served in a browser and deployed through the app store to phones and tablets.",
          "source": {
            "module": "@ionic/core/dist/types/components/split-pane/split-pane.d.ts",
            "symbol": "SplitPane"
          },
          "attributes": [
            {
              "name": "content-id",
              "description": "The content `id` of the split-pane's main content.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the split pane will be hidden.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "when",
              "description": "When the split-pane should be shown.\nCan be a CSS media query expression, or a shortcut expression.\nCan also be a boolean expression.",
              "required": false,
              "default": "QUERY['lg']",
              "value": {
                "kind": "expression",
                "type": "boolean | string"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "onVisible",
              "description": "Expression to be called when the split-pane visibility has changed",
              "arguments": [
                {
                  "name": "detail",
                  "type": "{ visible: boolean; }"
                }
              ]
            }
          ]
        },
        {
          "name": "IonTabBar",
          "doc-url": "https://ionicframework.com/docs/api/tab-bar",
          "description": "The tab bar is a UI component that contains a set of [tab buttons](../tab-button). A tab bar must be provided inside of [tabs](../tabs) to communicate with each [tab](../tab).",
          "source": {
            "module": "@ionic/core/dist/types/components/tab-bar/tab-bar.d.ts",
            "symbol": "TabBar"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "selected-tab",
              "description": "The selected tab component",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "translucent",
              "description": "If `true`, the tab bar will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonTabButton",
          "doc-url": "https://ionicframework.com/docs/api/tab-button",
          "description": "A tab button is a UI component that is placed inside of a [tab bar](../tab-bar). The tab button can specify the layout of the icon and label and connect to a [tab view](../tab).\n\nSee the [tabs documentation](../tabs) for more details on configuring tabs.",
          "source": {
            "module": "@ionic/core/dist/types/components/tab-button/tab-button.d.ts",
            "symbol": "TabButton"
          },
          "attributes": [
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the tab button.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "download",
              "description": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "href",
              "description": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "layout",
              "description": "Set the layout of the text and icon in the tab bar.\nIt defaults to `'icon-top'`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"icon-bottom\" | \"icon-end\" | \"icon-hide\" | \"icon-start\" | \"icon-top\" | \"label-hide\" | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "rel",
              "description": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "selected",
              "description": "The selected tab component",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "tab",
              "description": "A tab id must be provided for each `ion-tab`. It's used internally to reference\nthe selected tab or by the router to switch between them.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "target",
              "description": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonTabs",
          "doc-url": "https://ionicframework.com/docs/api/tabs",
          "description": "Tabs are a top level navigation component to implement a tab-based navigation.\nThe component is a container of individual [Tab](../tab/) components.\n\nThe `ion-tabs` component does not have any styling and works as a router outlet in order to handle navigation. It does not provide any UI feedback or mechanism to switch between tabs. In order to do so, an `ion-tab-bar` should be provided as a direct child of `ion-tabs`.\n\nBoth `ion-tabs` and `ion-tab-bar` can be used as standalone elements. They don’t depend on each other to work, but they are usually used together in order to implement a tab-based navigation that behaves like a native app.\n\nThe `ion-tab-bar` needs a slot defined in order to be projected to the right place in an `ion-tabs` component.",
          "source": {
            "module": "@ionic/core/dist/types/components/tabs/tabs.d.ts",
            "symbol": "Tabs"
          },
          "attributes": [],
          "slots": [
            {
              "name": "default",
              "description": "Content is placed between the named slots if provided without a slot."
            },
            {
              "name": "bottom",
              "description": "Content is placed at the bottom of the screen."
            },
            {
              "name": "top",
              "description": "Content is placed at the top of the screen."
            }
          ],
          "events": [
            {
              "name": "onDidChange",
              "description": "Emitted when the navigation has finished transitioning to a new component.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "{ tab: string; }"
                }
              ]
            },
            {
              "name": "onWillChange",
              "description": "Emitted when the navigation is about to transition to a new component.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "{ tab: string; }"
                }
              ]
            }
          ]
        },
        {
          "name": "IonTextarea",
          "doc-url": "https://ionicframework.com/docs/api/textarea",
          "description": "The textarea component is used for multi-line text input. A native textarea element is rendered inside of the component. The user experience and interactivity of the textarea component is improved by having control over the native textarea.\n\nUnlike the native textarea element, the Ionic textarea does not support loading its value from the inner content. The textarea value should be set in the `value` attribute.\n\nThe textarea component accepts the [native textarea attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) in addition to the Ionic properties.",
          "source": {
            "module": "@ionic/core/dist/types/components/textarea/textarea.d.ts",
            "symbol": "Textarea"
          },
          "attributes": [
            {
              "name": "auto-grow",
              "description": "If `true`, the element height will increase based on the value.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "autocapitalize",
              "description": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.",
              "required": false,
              "default": "'none'",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "autofocus",
              "description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "clear-on-edit",
              "description": "If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `\"password\"`, `false` for all other types.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "cols",
              "description": "The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | undefined"
              }
            },
            {
              "name": "debounce",
              "description": "Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.",
              "required": false,
              "default": "0",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the textarea.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "enterkeyhint",
              "description": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined"
              }
            },
            {
              "name": "inputmode",
              "description": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\" | undefined"
              }
            },
            {
              "name": "maxlength",
              "description": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | undefined"
              }
            },
            {
              "name": "minlength",
              "description": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "name",
              "description": "The name of the control, which is submitted with the form data.",
              "required": false,
              "default": "this.inputId",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "placeholder",
              "description": "Instructional text that shows before the input has a value.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            },
            {
              "name": "readonly",
              "description": "If `true`, the user cannot modify the value.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "required",
              "description": "If `true`, the user must fill in a value before submitting a form.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "rows",
              "description": "The number of visible text lines for the control.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "number | undefined"
              }
            },
            {
              "name": "spellcheck",
              "description": "If `true`, the element will have its spelling and grammar checked.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "value",
              "description": "The value of the textarea.",
              "required": false,
              "default": "''",
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            },
            {
              "name": "wrap",
              "description": "Indicates how the control wraps text.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"hard\" | \"off\" | \"soft\" | undefined"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the input loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "FocusEvent"
                }
              ]
            },
            {
              "name": "ionChange",
              "description": "Emitted when the input value has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "TextareaChangeEventDetail"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the input has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "FocusEvent"
                }
              ]
            },
            {
              "name": "ionInput",
              "description": "Emitted when a keyboard input occurred.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "KeyboardEvent"
                }
              ]
            }
          ]
        },
        {
          "name": "IonThumbnail",
          "doc-url": "https://ionicframework.com/docs/api/thumbnail",
          "description": "Thumbnails are square components that usually wrap an image or icon. They can be used to make it easier to display a group of larger images or provide a preview of the full-size image.\n\nThumbnails can be used by themselves or inside of any element. If placed inside of an `ion-item`, the thumbnail will resize to fit the parent component. To position a thumbnail on the left or right side of an item, set the slot to `start` or `end`, respectively.",
          "source": {
            "module": "@ionic/core/dist/types/components/thumbnail/thumbnail.d.ts",
            "symbol": "Thumbnail"
          },
          "attributes": [],
          "slots": [],
          "events": []
        },
        {
          "name": "IonTitle",
          "doc-url": "https://ionicframework.com/docs/api/title",
          "description": "`ion-title` is a component that sets the title of the `Toolbar`.",
          "source": {
            "module": "@ionic/core/dist/types/components/title/title.d.ts",
            "symbol": "Title"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "size",
              "description": "The size of the toolbar title.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"large\" | \"small\" | undefined"
              }
            }
          ],
          "slots": [],
          "events": []
        },
        {
          "name": "IonToast",
          "doc-url": "https://ionicframework.com/docs/api/toast",
          "description": "A Toast is a subtle notification commonly used in modern applications. It can be used to provide feedback about an operation or to display a system message. The toast appears on top of the app's content, and can be dismissed by the app to resume user interaction with the app.",
          "source": {
            "module": "@ionic/core/dist/types/components/toast/toast.d.ts",
            "symbol": "Toast"
          },
          "attributes": [
            {
              "name": "animated",
              "description": "If `true`, the toast will animate.",
              "required": false,
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "buttons",
              "description": "An array of buttons for the toast.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "(string | ToastButton)[] | undefined"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "css-class",
              "description": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | string[] | undefined"
              }
            },
            {
              "name": "duration",
              "description": "How many milliseconds to wait before hiding the toast. By default, it will show\nuntil `dismiss()` is called.",
              "required": false,
              "default": "0",
              "value": {
                "kind": "expression",
                "type": "number"
              }
            },
            {
              "name": "enterAnimation",
              "description": "Animation to use when the toast is presented.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "header",
              "description": "Header to be shown in the toast.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "keyboard-close",
              "description": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "leaveAnimation",
              "description": "Animation to use when the toast is dismissed.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "((baseEl: any, opts?: any) => Animation) | undefined"
              }
            },
            {
              "name": "message",
              "description": "Message to be shown in the toast.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "IonicSafeString | string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "position",
              "description": "The position of the toast on the screen.",
              "required": false,
              "default": "'bottom'",
              "value": {
                "kind": "expression",
                "type": "\"bottom\" | \"middle\" | \"top\""
              }
            },
            {
              "name": "translucent",
              "description": "If `true`, the toast will be translucent.\nOnly applies when the mode is `\"ios\"` and the device supports\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "onDidDismiss",
              "description": "Emitted after the toast has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onDidPresent",
              "description": "Emitted after the toast has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "onWillDismiss",
              "description": "Emitted before the toast has dismissed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "OverlayEventDetail<any>"
                }
              ]
            },
            {
              "name": "onWillPresent",
              "description": "Emitted before the toast has presented.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonToggle",
          "doc-url": "https://ionicframework.com/docs/api/toggle",
          "description": "Toggles change the state of a single option. Toggles can be switched on or off by pressing or swiping them. They can also be checked programmatically by setting the `checked` property.",
          "source": {
            "module": "@ionic/core/dist/types/components/toggle/toggle.d.ts",
            "symbol": "Toggle"
          },
          "attributes": [
            {
              "name": "checked",
              "description": "If `true`, the toggle is selected.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "disabled",
              "description": "If `true`, the user cannot interact with the toggle.",
              "required": false,
              "default": "false",
              "value": {
                "kind": "expression",
                "type": "boolean"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            },
            {
              "name": "name",
              "description": "The name of the control, which is submitted with the form data.",
              "required": false,
              "default": "this.inputId",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "The value of the toggle does not mean if it's checked or not, use the `checked`\nproperty for that.\n\nThe value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\nit's only used when the toggle participates in a native `<form>`.",
              "required": false,
              "default": "'on'",
              "value": {
                "kind": "expression",
                "type": "null | string | undefined"
              }
            }
          ],
          "slots": [],
          "events": [
            {
              "name": "ionBlur",
              "description": "Emitted when the toggle loses focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            },
            {
              "name": "ionChange",
              "description": "Emitted when the value property has changed.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "ToggleChangeEventDetail"
                }
              ]
            },
            {
              "name": "ionFocus",
              "description": "Emitted when the toggle has focus.",
              "arguments": [
                {
                  "name": "detail",
                  "type": "void"
                }
              ]
            }
          ]
        },
        {
          "name": "IonToolbar",
          "doc-url": "https://ionicframework.com/docs/api/toolbar",
          "description": "Toolbars are positioned above or below content. When a toolbar is placed in an `<ion-header>` it will appear fixed at the top of the content, and when it is in an `<ion-footer>` it will appear fixed at the bottom. Fullscreen content will scroll behind a toolbar in a header or footer. When placed within an `<ion-content>`, toolbars will scroll with the content.",
          "source": {
            "module": "@ionic/core/dist/types/components/toolbar/toolbar.d.ts",
            "symbol": "Toolbar"
          },
          "attributes": [
            {
              "name": "color",
              "description": "The color to use from your application's color palette.\nDefault options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\nFor more information on colors, see [theming](/docs/theming/basics).",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "string | undefined"
              }
            },
            {
              "name": "mode",
              "description": "The mode determines which platform styles to use.",
              "required": false,
              "value": {
                "kind": "expression",
                "type": "\"ios\" | \"md\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Content is placed between the named slots if provided without a slot."
            },
            {
              "name": "end",
              "description": "Content is placed to the right of the toolbar text in LTR, and to the left in RTL."
            },
            {
              "name": "primary",
              "description": "Content is placed to the right of the toolbar text in `ios` mode, and to the far right in `md` mode."
            },
            {
              "name": "secondary",
              "description": "Content is placed to the left of the toolbar text in `ios` mode, and directly to the right in `md` mode."
            },
            {
              "name": "start",
              "description": "Content is placed to the left of the toolbar text in LTR, and to the right in RTL."
            }
          ],
          "events": []
        }
      ]
    }
  }
}