import type { Node, Program, ObjectExpression, ArrayExpression, Literal, Identifier, UnaryExpression, TemplateLiteral, Expression } from "estree";
import type { AST } from "eslint";
import type { JSONNode, JSONProgram, JSONObjectExpression, JSONArrayExpression, JSONExpression, JSONLiteral, JSONIdentifier, Locations, JSONUnaryExpression, JSONTemplateLiteral } from "./ast";
import type { ParseError } from "./errors";
import type { TokenStore, MaybeNodeOrToken } from "./token-store";
export declare type JSONSyntaxContext = {
    trailingCommas: boolean;
    comments: boolean;
    plusSigns: boolean;
    spacedSigns: boolean;
    leadingOrTrailingDecimalPoints: boolean;
    infinities: boolean;
    nans: boolean;
    numericSeparators: boolean;
    invalidJsonNumbers: boolean;
    multilineStrings: boolean;
    unquoteProperties: boolean;
    singleQuotes: boolean;
    numberProperties: boolean;
    undefinedKeywords: boolean;
    sparseArrays: boolean;
    regExpLiterals: boolean;
    templateLiterals: boolean;
    bigintLiterals: boolean;
};
export declare function convertNode(node: Program, tokens: TokenStore, ctx: JSONSyntaxContext): JSONProgram;
export declare function convertNode(node: ObjectExpression, tokens: TokenStore, ctx: JSONSyntaxContext): JSONObjectExpression;
export declare function convertNode(node: ArrayExpression, tokens: TokenStore, ctx: JSONSyntaxContext): JSONArrayExpression;
export declare function convertNode(node: Literal, tokens: TokenStore, ctx: JSONSyntaxContext): JSONLiteral;
export declare function convertNode(node: UnaryExpression, tokens: TokenStore, ctx: JSONSyntaxContext): JSONUnaryExpression;
export declare function convertNode(node: Identifier, tokens: TokenStore, ctx: JSONSyntaxContext): JSONIdentifier;
export declare function convertNode(node: TemplateLiteral, tokens: TokenStore, ctx: JSONSyntaxContext): JSONTemplateLiteral;
export declare function convertNode(node: Expression, tokens: TokenStore, ctx: JSONSyntaxContext): JSONExpression;
export declare function convertNode(node: Node, tokens: TokenStore, ctx: JSONSyntaxContext): JSONNode;
export declare function convertToken(token: AST.Token): AST.Token;
export declare function fixLocation(node: MaybeNodeOrToken | AST.Token): void;
export declare function fixErrorLocation(error: ParseError): void;
export declare function getFixLocation(node: MaybeNodeOrToken | AST.Token): Locations;
