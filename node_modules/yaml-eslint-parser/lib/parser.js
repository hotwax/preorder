"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParseError = exports.parseForESLint = void 0;
const yaml_unist_parser_1 = require("yaml-unist-parser");
const visitor_keys_1 = require("./visitor-keys");
const convert_1 = require("./convert");
/**
 * Parse source code
 */
function parseForESLint(code, _options) {
    try {
        const rootNode = yaml_unist_parser_1.parse(code);
        const ast = convert_1.convertRoot(rootNode, code);
        return {
            ast,
            visitorKeys: visitor_keys_1.KEYS,
            services: {
                isYAML: true,
            },
        };
    }
    catch (err) {
        if (isYAMLSyntaxError(err)) {
            throw new ParseError(err.message, err.position.start.offset, err.position.start.line, err.position.start.column - 1);
        }
        throw err;
    }
}
exports.parseForESLint = parseForESLint;
/**
 * Type guard for YAMLSyntaxError.
 */
function isYAMLSyntaxError(error) {
    return (typeof error.position === "object" &&
        typeof error.position.start === "object" &&
        typeof error.position.end === "object" &&
        typeof error.position.start.line === "number" &&
        typeof error.position.start.column === "number" &&
        typeof error.position.start.offset === "number" &&
        typeof error.position.end.line === "number" &&
        typeof error.position.end.column === "number" &&
        typeof error.position.end.offset === "number");
}
/**
 * YAML parse errors.
 */
class ParseError extends SyntaxError {
    /**
     * Initialize this ParseError instance.
     * @param message The error message.
     * @param offset The offset number of this error.
     * @param line The line number of this error.
     * @param column The column number of this error.
     */
    constructor(message, offset, line, column) {
        super(message);
        this.index = offset;
        this.lineNumber = line;
        this.column = column;
    }
}
exports.ParseError = ParseError;
