"use strict";
exports.__esModule = true;
var alias_1 = require("./transforms/alias");
var block_folded_1 = require("./transforms/block-folded");
var block_literal_1 = require("./transforms/block-literal");
var comment_1 = require("./transforms/comment");
var directive_1 = require("./transforms/directive");
var document_1 = require("./transforms/document");
var flow_map_1 = require("./transforms/flow-map");
var flow_seq_1 = require("./transforms/flow-seq");
var map_1 = require("./transforms/map");
var plain_1 = require("./transforms/plain");
var quote_double_1 = require("./transforms/quote-double");
var quote_single_1 = require("./transforms/quote-single");
var seq_1 = require("./transforms/seq");
function transformNode(node, context) {
    if (node === null || (node.type === undefined && node.value === null)) {
        return null;
    }
    // prettier-ignore
    switch (node.type) {
        case "ALIAS": return alias_1.transformAlias(node, context);
        case "BLOCK_FOLDED": return block_folded_1.transformBlockFolded(node, context);
        case "BLOCK_LITERAL": return block_literal_1.transformBlockLiteral(node, context);
        case "COMMENT": return comment_1.transformComment(node, context);
        case "DIRECTIVE": return directive_1.transformDirective(node, context);
        case "DOCUMENT": return document_1.transformDocument(node, context);
        case "FLOW_MAP": return flow_map_1.transformFlowMap(node, context);
        case "FLOW_SEQ": return flow_seq_1.transformFlowSeq(node, context);
        case "MAP": return map_1.transformMap(node, context);
        case "PLAIN": return plain_1.transformPlain(node, context);
        case "QUOTE_DOUBLE": return quote_double_1.transformQuoteDouble(node, context);
        case "QUOTE_SINGLE": return quote_single_1.transformQuoteSingle(node, context);
        case "SEQ": return seq_1.transformSeq(node, context);
        // istanbul ignore next
        default: throw new Error("Unexpected node type " + node.type);
    }
}
exports.transformNode = transformNode;
