"use strict";
exports.__esModule = true;
var tslib_1 = require("tslib");
var document_body_1 = require("../factories/document-body");
var get_last_1 = require("../utils/get-last");
var get_match_index_1 = require("../utils/get-match-index");
var get_point_text_1 = require("../utils/get-point-text");
function transformDocumentBody(document, context, headEndMarkerPoint) {
    var _a;
    var cstNode = document.cstNode;
    var _b = categorizeNodes(cstNode, context, headEndMarkerPoint), comments = _b.comments, endComments = _b.endComments, documentTrailingComment = _b.documentTrailingComment, documentHeadTrailingComment = _b.documentHeadTrailingComment;
    var content = context.transformNode(document.contents);
    var _c = getPosition(cstNode, content, context), position = _c.position, documentEndPoint = _c.documentEndPoint;
    (_a = context.comments).push.apply(_a, tslib_1.__spreadArrays(comments, endComments));
    return {
        documentBody: document_body_1.createDocumentBody(position, content, endComments),
        documentEndPoint: documentEndPoint,
        documentTrailingComment: documentTrailingComment,
        documentHeadTrailingComment: documentHeadTrailingComment
    };
}
exports.transformDocumentBody = transformDocumentBody;
function categorizeNodes(document, context, headEndMarkerPoint) {
    var comments = [];
    var endComments = [];
    var documentTrailingComments = [];
    var documentHeadTrailingComments = [];
    var hasContent = false;
    for (var i = document.contents.length - 1; i >= 0; i--) {
        var node = document.contents[i];
        if (node.type === "COMMENT") {
            var comment = context.transformNode(node);
            if (headEndMarkerPoint &&
                headEndMarkerPoint.line === comment.position.start.line) {
                documentHeadTrailingComments.unshift(comment);
            }
            else if (hasContent) {
                comments.unshift(comment);
            }
            else if (comment.position.start.offset >= document.valueRange.origEnd) {
                documentTrailingComments.unshift(comment);
            }
            else {
                comments.unshift(comment);
            }
        }
        else {
            hasContent = true;
        }
    }
    // istanbul ignore next
    if (documentTrailingComments.length > 1) {
        throw new Error("Unexpected multiple document trailing comments at " + get_point_text_1.getPointText(documentTrailingComments[1].position.start));
    }
    // istanbul ignore next
    if (documentHeadTrailingComments.length > 1) {
        throw new Error("Unexpected multiple documentHead trailing comments at " + get_point_text_1.getPointText(documentHeadTrailingComments[1].position.start));
    }
    return {
        comments: comments,
        endComments: endComments,
        documentTrailingComment: get_last_1.getLast(documentTrailingComments) || null,
        documentHeadTrailingComment: get_last_1.getLast(documentHeadTrailingComments) || null
    };
}
function getPosition(document, content, context) {
    var markerIndex = get_match_index_1.getMatchIndex(context.text.slice(document.valueRange.origEnd), /^\.\.\./);
    var origEnd = markerIndex === -1
        ? document.valueRange.origEnd
        : Math.max(0, document.valueRange.origEnd - 1);
    // CRLF fix
    if (context.text[origEnd - 1] === "\r") {
        origEnd--;
    }
    var position = context.transformRange({
        origStart: content !== null ? content.position.start.offset : origEnd,
        origEnd: origEnd
    });
    var documentEndPoint = markerIndex === -1
        ? position.end
        : context.transformOffset(document.valueRange.origEnd + 3);
    return { position: position, documentEndPoint: documentEndPoint };
}
