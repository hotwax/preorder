"use strict";
exports.__esModule = true;
var flow_mapping_1 = require("../factories/flow-mapping");
var flow_mapping_item_1 = require("../factories/flow-mapping-item");
var extract_comments_1 = require("../utils/extract-comments");
var get_flow_map_item_additional_ranges_1 = require("../utils/get-flow-map-item-additional-ranges");
var get_last_1 = require("../utils/get-last");
var group_cst_flow_collection_items_1 = require("../utils/group-cst-flow-collection-items");
var pair_1 = require("./pair");
function transformFlowMap(flowMap, context) {
    var cstItemsWithoutComments = extract_comments_1.extractComments(flowMap.cstNode.items, context);
    var groupedCstItems = group_cst_flow_collection_items_1.groupCstFlowCollectionItems(cstItemsWithoutComments);
    var flowMappingItems = flowMap.items.map(function (pair, index) {
        var cstNodes = groupedCstItems[index];
        var _a = get_flow_map_item_additional_ranges_1.getFlowMapItemAdditionalRanges(cstNodes), additionalKeyRange = _a.additionalKeyRange, additionalValueRange = _a.additionalValueRange;
        return pair_1.transformAstPair(pair, context, flow_mapping_item_1.createFlowMappingItem, additionalKeyRange, additionalValueRange);
    });
    var openMarker = cstItemsWithoutComments[0];
    var closeMarker = get_last_1.getLast(cstItemsWithoutComments);
    return flow_mapping_1.createFlowMapping(context.transformRange({
        origStart: openMarker.origOffset,
        origEnd: closeMarker.origOffset + 1
    }), context.transformContent(flowMap), flowMappingItems);
}
exports.transformFlowMap = transformFlowMap;
