import { AST, Document as _Document } from "yaml";
import { CST } from "yaml/parse-cst";
import { Alias as _Alias, Merge as _Merge, Node as _Node, Pair as _Pair, Scalar as _Scalar } from "yaml/types";
export declare const Document: typeof _Document;
export { parseCST } from "yaml";
export { ParsedCST } from "yaml/parse-cst";
export { YAMLError, YAMLSyntaxError, YAMLSemanticError } from "yaml/util";
export declare namespace ast {
    type Alias = _Alias;
    type BlockFolded = AST.BlockFolded;
    type BlockLiteral = AST.BlockLiteral;
    type Document = _Document;
    type FlowMap = AST.FlowMap;
    type FlowSeq = AST.FlowSeq;
    type Map = AST.BlockMap;
    type Merge = _Merge;
    type Node = _Node;
    type Pair = _Pair;
    type PlainValue = AST.PlainValue;
    type QuoteDouble = AST.QuoteDouble;
    type QuoteSingle = AST.QuoteSingle;
    type Scalar = _Scalar;
    type Seq = AST.BlockSeq;
}
export declare namespace cst {
    type Alias = CST.Alias;
    type BlankLine = CST.BlankLine;
    type BlockFolded = CST.BlockFolded;
    type BlockLiteral = CST.BlockLiteral;
    type BlockValue = CST.BlockValue;
    type Comment = CST.Comment;
    type Directive = CST.Directive;
    type Document = CST.Document;
    type FlowChar = CST.FlowChar;
    type FlowCollection = CST.FlowCollection;
    type FlowMap = CST.FlowMap;
    type FlowSeq = CST.FlowSeq;
    type Map = CST.Map;
    type MapItem = CST.MapItem;
    type MapKey = CST.MapKey;
    type MapValue = CST.MapValue;
    type Node = CST.Node;
    type PlainValue = CST.PlainValue;
    type QuoteDouble = CST.QuoteDouble;
    type QuoteSingle = CST.QuoteSingle;
    type QuoteValue = CST.QuoteValue;
    type Range = CST.Range;
    type Seq = CST.Seq;
    type SeqItem = CST.SeqItem;
}
